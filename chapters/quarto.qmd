# Quarto

## Що таке Quarto
[Quarto](https://quarto.org/) --- це науково--технічна видавнича система з відкритим кодом, яка ґрунтується на універсальному конверторі документів [Pandoc](https://pandoc.org/) та використовує мову розмітки [Markdown](https://www.markdownguide.org/). Це універсальний інструмент для тих, хто пише на R, Python, Julia та Observable JavaScript.

За допомогою Quarto можна поєднувати описовий текст і код для створення відформатованих документів, веб--сторінок, постів у блогах, книг тощо.

### Назва Quarto
Розробники Quarto хотіли використати ім'я, яке мало деяке значення в історії видавничої справи. Вибір пав на Quarto (від латинського *quārtō*, скорочено *Qto*, *4t*o або *4º*) --- це формат книги або брошури в одну четвертину топографічного листа. На кожній стороні листа при цьому поміщається 4 сторінки книги (8 сторінок на один лист). 

Найраннішим відомим виданням такого формату була Книга Сивіл (англ. *Sibyllenbuch*), що була надрукована Йоганном Гутенбергом у 1452--1453 роках.

[![Quarto](img/quarto2.jpg){#fig-quarto}](https://en.wikipedia.org/wiki/Quarto)

### Можливості Quarto
Quarto являє собою текстовий документ спеціального формату `.qmd`, який можна скомпілювати у різноманітні документи:

- Документи у форматах:
    - [HTML](https://quarto.org/docs/reference/formats/html.html)
    - [PDF](https://quarto.org/docs/reference/formats/pdf.html)
    - [ePub](https://quarto.org/docs/reference/formats/epub.html)
    - [MS Word](https://quarto.org/docs/reference/formats/docx.html)
    - [OpenOffice](https://quarto.org/docs/reference/formats/odt.html)

- Презентації у форматах:
    - [reveal.js](https://quarto.org/docs/presentations/revealjs) (HTML)
    - [PowerPoint](https://quarto.org/docs/presentations/powerpoint.html) (MS Office)
    - [Beamer](https://quarto.org/docs/presentations/beamer.html) (LaTeX/PDF)

- Веб-сторінки:
    - [Practical Deep Learning](https://course.fast.ai/) від fast.ai
    - [nbdev](https://nbdev.fast.ai/) від fast.ai
    - Курс [Julia Workshop for Data Science](https://crsl4.github.io/julia-workshop/)

- Книги, приклади яких можна переглянути за посиланнями:
    - [Python for Data Analysis](https://wesmckinney.com/book/)
    - [R for Data Science](https://r4ds.hadley.nz/)
    - [Visualization Curriculum](https://jjallaire.github.io/visualization-curriculum)
- Інтерактивні документи:
    - [Observable](https://quarto.org/docs/interactive/ojs/examples/penguins.html) reactive JavaScript
    - [Shiny](https://jjallaire.shinyapps.io/diamonds-explorer/) вебфреймворк
    - Інтерактивні віджети [Jupyter](https://quarto.org/docs/interactive/widgets/jupyter.html)

## Початок роботи з Quarto
### Встановлення Quarto
Для роботи з Quarto потрібно:
1. Встановити [інтерфейс командного рядка Quarto](https://quarto.org/docs/download/) (CLI) під актуальну операційну систему (Windows, Linux або Mac OS).

2. Встановити плагін для інтегрованого середовища розробки (IDE). На даний момент підтримуються:
    - [VS Code](https://quarto.org/docs/get-started/hello/vscode.html)
    - [RStudio](https://quarto.org/docs/get-started/hello/rstudio.html)
    - [Jupyter](https://quarto.org/docs/get-started/hello/jupyter.html)

### Робота з проектами
Створити Quarto--проект можна декількома шляхами:

1. За допомогою командного рядка:

```{.bash filename="terminal"}
# веб-сайт
quarto create-project mysite --type website

# блог
quarto create-project myblog --type website:blog

# книга
quarto create-project mybook --type book
```

2. Засобами IDE:

- **VS Code**: *File -> New File -> ...*

![Меню створення Quarto--проекту у VS Code](img/vscode.jpg){#fig-vscode}

- **RStudio**: *File -> New Project… -> New Directory*

![Меню створення Quarto--проекту у RStudio](img/rstudio.jpg){#fig-rstudio width=85%}

### Як працює Quarto
Спочатку Knitr (для R) або Jupyter (для Python або Julia) виконує всі фрагменти коду .qmd-файлу і створює новий markdown (.md) документ, який включає в себе код і всі його результати. Далі .md--файл оброблюється Pandoc для перетворення у різноманітні формати файлів (HTML, PDF, Word тощо).

![Процедура рендерінгу документів в Quarto](img/qmd-jupyter.jpeg){#fig-qmd-jupyter}

### Рендерінг
1. Для рендерінгу документу можна використати кнопку **Render** в VS Code.

![Клавіша рендерінгу документу в VS Code](img/render.jpg){#fig-qmd-render}

2. Рендерінг за допомогою командного рядку:

```{.bash filename="terminal"}
quarto render <input> --to <format>

# Наприклад:
quarto render document.qmd --to docx
```

## Структура документів Quatro
Quatro документи складаються з трьох базових складових:

- YAML--шапки[^yaml]
- Текст з використанням розмітки Markdown
- Чанків (анг. *chunks*) з кодом

[^yaml]: YAML це рекурсивний акронім YAML Ain't Markup Language («YAML — не мова розмітки»). У назві відображена історія розвитку: на ранніх етапах мова називалася Yet Another Markup Language («Ще одна мова розмітки») і навіть розглядалася як конкурент XML, але пізніше була перейменована з метою акцентувати увагу на даних, а не на розбивці документів.

### YAML--шапка
YAML--шапка знаходиться нагорі документу і відділена трьома дефісами (`---`) зверху та знизу. В ній зберігається мета--інформація документу: назва, дата створення, автор, інформація щодо роботи коду, контенту і процесу рендерінгу.

``` markdown
---
title: "Dracula"
author: "Bram Stoker"
date: "May 26, 1897"
format: 
  html:
    toc: true
    code-fold: true
---
```

### Текст з використанням розмітки Markdown
Ця частина документу йде одраtextзу після YAML--шапки і складає основну частину документу.

Markdown --- це популярна і зручна мова розмітки. Ви непевно зустрічали її в `README.md`--файлах репозиторіїв GitHub, а також у Telegram--повідомленнях.

### Чанки з кодом
Чанки --- це блоки, які відділяються від тексту потрійними зворотніми лапками ```` ``` ```` ( анг. *backtick*) на початку та в кінці. У фігурних дужках вказується мова програмування на якій необхідно виконати код. 

```{{python}}
print('Fly, you fools!')
```

Результат чанку за замовчування виводиться одразу після нього, але все це можна налаштувати.

## YAML-шапка
Метадані документу можуть бути задані у шапці документу або окремим `_quarto.yml`-файлом.

В цій частині документу зберігається інформація щодо назви документу, дати, автора, налаштування рендерінгу, параметри чанків та інші додаткові налаштування. Всі параметри встановлюються у форматі `key: value`.

### Налаштування виводу
Ключ `format:` відповідає за тип вихідного файлу.

+--------------+-----------------+---------------------------------+
| Тип          | Значення        | Опис                            |
+==============+=================+=================================+
| Документи    | - `html`        | - HTML                          |
|              | - `pdf`         | - PDF                           |
|              | - `docx`        | - MS Word                       |
|              | - `odt`         | - OpenDocument                  |
|              | - `epub`        | - ePub                          |
+--------------+-----------------+---------------------------------+
| Презентації  | - `revealjs`    | - Revealjs                      |
|              | - `pptx`        | - PowerPoint                    |
|              | - `beamer`      | - Beamer                        |
+--------------+-----------------+---------------------------------+
| Markdown     | - `gfm`         | - GFM                           |
|              | - `commonmark`  | - CommonMark                    |
|              | - `markua`      | - Markua                        |
+--------------+-----------------+---------------------------------+
| Wiki         | - `mediawiki`   | - MediaWiki                     |
|              | - `dokuwiki`    | - DocuWiki                      |
|              | - `zimwiki`     | - ZimWiki                       |
|              | - `jira`        | - Jira Wiki                     |
|              | - `xwiki`       | - XWiki                         |
+--------------+-----------------+---------------------------------+

А також цілу низку інших форматів, документацію по котрим можна отримати в розділі [Reference](https://quarto.org/docs/reference/) документації.

### Назва, дата та автор
В залежності від типу вихідного документу, ці ключі можуть відрізнятися, але наведу основні:

+---------------------+---------------------------------+
| Ключ                | Значення                        |
+=====================+=================================+
| `title`             | Назва документа                 |
+---------------------+---------------------------------+
| `subtitle`          | Підзаголовок документа          |
+---------------------+---------------------------------+
| `date`              | Дата документа                  |
+---------------------+---------------------------------+
| `author`            |  Автор або автори документа     |
+---------------------+---------------------------------+


### Зміст
Для генерації змісту (анг. *table of contents*, скорочено *toc*) необхідно ключу `toc` задати значення `true`. В залежності від типу вихідного документу зміст буде згенерований відповідно до заголовків (@sec-headers).

+---------------------+-----------------------------------------------------------------------------+
| Ключ                | Значення                                                                    |
+=====================+=============================================================================+
| `toc`               | Додайте автоматично створений зміст у вихідний документ.                    |
+---------------------+-----------------------------------------------------------------------------+
| `toc-depth`         | Кількість рівнів розділу, які потрібно включити у зміст. За замовчуванням 3 |
+---------------------+-----------------------------------------------------------------------------+
| `toc-title`         | Заголовок, використаний для змісту.                                         |
+---------------------+-----------------------------------------------------------------------------+

### Локалізація документу
Quarto, Pandoc та LaTeX генерують текстові елементи документу, які потребують локалізації. Наприклад: "Рисунок" або "Таблиця" для перехресних посилань, назви виносок тощо.

#### Налаштування `lang`
Приклад використання польської локалізації документу:

``` markdown
---
title: "Mój dokument"
lang: pl  
---
```

Це призведе до використання польського перекладу компонентів документу, а також до застосування інших мовних правил обробки документів.

Наразі доступні повні переклади такими мовами:

- англійська (`en`, за замовчуванням)
- голландська (`nl`)
- іспанська (`es`)
- італійська (`it`)
- китайська (`zh`)
- корейська (`kr`)
- німецька (`de`)
- польська (`pl`)
- португальська (`pt`)
- російська (`ru`)
- фінська (`fi`)
- французька (`fr`)
- чеська (`cs`)
- японська (`ja`)

#### Власна локалізація
Якщо вас не влаштовує мова за умовчанням, яка використовується для певної частини документа, ви можете вказати альтернативну мову за допомогою ключа `language`. Наприклад, щоб замінити значення підписів «Author» і «Published», які використовуються в блоках заголовків, ви можете зробити це:

``` markdown
---
title: "Мій документ"
author: "Ігор Мірошниченко"
date: 12/15/2022
language: 
  title-block-author-single: "Автор"
  title-block-published: "Опубліковано"
---
```

Всі ці зміни можна зберегти в окремому `.yml`-файлі і використовувати власну локалізацію до документу:

``` markdown
---
title: "Мій документ"
author: "Ігор Мірошниченко"
date: 12/15/2022
language: custom.yml
---
```

Я зробив власну українську локалізацію Quarto-документів, яку Ви можете завантажити з мого GitHub-репозиторія: https://github.com/aranaur/quarto-ukrainian.

Ознайомитися з усіма офіційними локалізаціями можна за посиланням: https://github.com/quarto-dev/quarto-cli/tree/main/src/resources/language.

## Основи Markdown
Quarto ґрунтується на Pandoc та використовує різновид markdown в якості базового синтаксису. Pandoc markdown --- це розширена та злегка перероблена версія синтаксису markdown.

Markdown — це формат звичайного тексту, який розроблено таким чином, щоб його було легко писати та, що ще важливіше, легко читати.

### Форматування тексту

+-------------------------------------+---------------------------------+
| Синтаксис markdown                  | Результат                       |
+=====================================+=================================+
|     *курсив* та **жирний**          | *курсив* та **жирний**          |
+-------------------------------------+---------------------------------+
|     надрядковий^2^ / підрядковий~2~ | надрядковий^2^ / підрядковий~2~ |
+-------------------------------------+---------------------------------+
|     ~~перекреслення~~               | ~~перекреслення~~               |
+-------------------------------------+---------------------------------+
|     `дослівний код`                 | `дослівний код`                 |
+-------------------------------------+---------------------------------+

### Заголовки {#sec-headers}

+------------------------+---------------------------------------------------+
| Синтаксис markdown     | Результат                                         |
+========================+===================================================+
|     # Заголовок 1      | # Заголовок 1 {.heading-output .unnumbered}       |
+------------------------+---------------------------------------------------+
|     ## Заголовок 2     | ## Заголовок 2 {.heading-output .unnumbered}      |
+------------------------+---------------------------------------------------+
|     ### Заголовок 3    | ### Заголовок 3 {.heading-output .unnumbered}     |
+------------------------+---------------------------------------------------+
|     #### Заголовок 4   | #### Заголовок 4 {.heading-output .unnumbered}    |
+------------------------+---------------------------------------------------+
|     ##### Заголовок 5  | ##### Заголовок 5 {.heading-output .unnumbered}   |
+------------------------+---------------------------------------------------+
|     ###### Заголовок 6 | ###### Заголовок 6 {.heading-output .unnumbered}  |
+------------------------+---------------------------------------------------+

### Посилання та рисунки

+----------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+
| Синтаксис markdown                                                         | Результат                                                                                          |
+============================================================================+====================================================================================================+
|     [Python](https://python.org)                                           | [Python](https://python.org)                                                                       |
+----------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+
|     ![Підпис](img/python-logo.jpg)                                         | ![Підпис](img/python-logo.jpg){fig-alt="Лого Python."}                                             |
+----------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+
|     [![Caption](img/python-logo.jpg)](https://www.python.org)              | [![Caption](img/python-logo.jpg)](https://www.python.org)                                          |
+----------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+
|     [![Caption](img/python-logo.jpg)](https://www.python.org "Python")     | [![Caption](img/python-logo.jpg "Python"){fig-alt="Лого Python."}](https://www.python.org)         |
+----------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+
|     [![](img/python-logo.jpg){fig-alt="Alt text"}](https://www.python.org) | [![](img/python-logo.jpg){fig-alt="A line drawing of an elephant."}](https://www.python.org)       |
+----------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+

### Списки

+-------------------------------------------------+---------------------------------------+
| Синтаксис markdown                              | Результат                             |
+=================================================+=======================================+
|     * невпорядкований список                    | -   невпорядкований список            |
|         + підпункт 1                            |                                       |
|         + підпункт 2                            |     -   підпункт 1                    |
|             - під--підпункт 1                   |                                       |
|                                                 |     -   підпункт 2                    |
|                                                 |                                       |
|                                                 |         -   під--підпункт 1           |
+-------------------------------------------------+---------------------------------------+
|     *   пункт 2                                 | -   пункт 2                           |
|                                                 |                                       |
|         Продовження (відступ 4 інтервали)       |     Продовження (відступ 4 інтервали) |
+-------------------------------------------------+---------------------------------------+
|     1. впорядкований список                     | 1.  впорядкований список              |
|     2. пункт 2                                  |                                       |
|         i) підпункт 1                           | 2.  пункт 2                           |
|              A.  під--підпункт 1                |                                       |
|                                                 |     i)  підпункт 1                    |
|                                                 |                                       |
|                                                 |         A.  під--підпункт 1           |
+-------------------------------------------------+---------------------------------------+
|     (@)  Список, нумерація якого                | (1) Список, нумерація якого           |
|                                                 |                                       |
|     продовжується після                         | продовжується після                   |
|                                                 |                                       |
|     (@)  переривання                            | (2) переривання                       |
+-------------------------------------------------+---------------------------------------+
|     термін                                      | термін                                |
|     : визначення                                |                                       |
|                                                 | :   визначення                        |
+-------------------------------------------------+---------------------------------------+

### Таблиці

#### Таблиці markdown
##### Синтаксис markdown{.unnumbered} 

    | Зліва | Справа | За замовчуванням | По центру |
    |------:|:-------|------------------|:---------:|
    |   12  |  12    |    12            |    12     |
    |  123  |  123   |   123            |   123     |
    |    1  |    1   |     1            |     1     |

##### Результат{.unnumbered} 

| Зліва | Справа | За замовчуванням | По центру |
|------:|:-------|------------------|:---------:|
|   12  |  12    |    12            |    12     |
|  123  |  123   |   123            |   123     |
|    1  |    1   |     1            |     1     |

Формувати такі таблиці вручну досить складно і незручно. В таких випадках на допомогу приходить [Markdown Tables Generator](https://www.tablesgenerator.com/markdown_tables).

#### Таблиці з Python {#sec-py-table}
1. За допомогою комбінації функцій `Markdown()` та пакету `tabulate`:

```{.bash filename="terminal"}
pip install tabulate
```

```{python}
#| label: tbl-character-1
#| tbl-cap: Персонажі Середзем'я

from IPython.display import Markdown
from tabulate import tabulate
table = [["Bilbo Baggins", "Hobbits", "Male"],
         ["Beren", "Men", "Male"],
         ["Nimrodel", "Elves", "Female"],
         ["Muzgash", "Orc", "Male"]]
Markdown(tabulate(
  table, 
  headers=["Name", "Race", "Sex"]
))
```

2. Pandas DataFrame у форматі консолі:

- через функцію `print()`, у форматі консолі:

```{python}
import pandas as pd

df = pd.DataFrame(data = table,
    columns = ["Name", "Race", "Sex"])
print(df)
```

3. Можна викликати Python через R за допомогою пакету `reticulate` та використати функцію `kable()` з пакету `knitr`:
```{r}
#| label: tbl-character-2
#| tbl-cap: Персонажі Середзем'я


library(reticulate)
library(knitr)

kable(py$df)
```

 - Додаткові можливості з'являються разом з пакетом [`kableExtra`](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html):

```{r}
#| label: tbl-character-3
#| tbl-cap: Персонажі Середзем'я

# R chunk
library(kableExtra)

py$df %>% 
  kbl() %>%
  kable_classic_2(full_width = F)
```

### Рівняння
Для запису рівняння в середині тексту використовується одинарний символ `$` та подвійний `$$` для запису рівняння з нового рядка:

+-------------------------------------+-------------------------------+
| Синтаксис markdown                  | Результат                     |
+=====================================+===============================+
|     у середині тексту: $E = mc^{2}$ | у середині тексту: $E=mc^{2}$ |
+-------------------------------------+-------------------------------+
|     з нового рядка:                 | з нового рядка:\              |
|                                     | $$E = mc^{2}$$                |
|     $$E = mc^{2}$$                  |                               |
+-------------------------------------+-------------------------------+

В якості допомоги формування рівнянь рекомендую ресурс [Online LaTeX Equation Editor](https://latex.codecogs.com/eqneditor/editor.php).

### Діаграми
Quarto має вбудовану підтримку для створення діаграм [Mermaid](https://mermaid-js.github.io/mermaid/#/) та [Graphviz](https://graphviz.org/). Це дає змогу створювати блок--схеми, діаграми послідовності, діаграми станів тощо, використовуючи синтаксис простого тексту.

Приклад створення блок--схеми за допомогою Mermaid:

```{mermaid}
%%| echo: fenced
flowchart LR
  A[Квадратна форма] --> B(Кругла форма)
  B --> C{Рішення}
  C --> D[Результат один]
  C --> E[Результат два]
```

Більше інформації у розділі [Diagrams](https://quarto.org/docs/authoring/diagrams.html).

### Відео
Вставляти відео у документи можна за допомогою запису `{{{< video >}}}`.

Приклад використання відео з Youtube:
``` {.markdown shortcodes="false"}
{{< video https://www.youtube.com/embed/qOhk7YyxXQ4 >}}
```

Більше інформації у розділі [Videos](https://quarto.org/docs/authoring/videos.html).

### Виноски
#### Типи виносок
Виноски — чудовий спосіб привернути додаткову увагу до певних понять або чіткіше вказати, що певний вміст є додатковим або потребує додаткової уваги.

У Quarto є п'ять різноманітних виносок:
- примітка (`note`)
- застереження (`warning`)
- важливо (`important`)
- підказка (`tip`)
- попередження (`caution`)

Колір і значок відрізнятимуться залежно від обраного типу. Ось як виглядають різні виноски в HTML:

::: callout-note
## Примітка
Зауважте, що існує п’ять типів виносок, зокрема: `note`, `tip`, `warning`, `caution` та `important`.
:::

::: callout-warning
## Застереження
Виноски --- простий спосіб привернути увагу, наприклад, до цього застереження.
:::

::: callout-important
## Важливо

Виноски точно покращать Ваш текст.
:::

::: callout-tip
## Підказка

Приклад виноски з текстом
:::

::: {.callout-caution collapse="true"}
## Розгорніть, щоб дізнатися про згортання

Це приклад «згорнутої» виноски з попередженням. Використайте `collapse="true"` щоб згорнути її за замовчуванням та `collapse="false"` щоб виноска могла бути згорнута, але була розгорнути за замовчуванням.
:::

#### Синтаксис markdown
Створіть виноски в розмітці за допомогою наступного синтаксису (зверніть увагу, що перший заголовок, використаний у виносці, використовується як заголовок виноски):

``` markdown
::: {.callout-note}
## Примітка

Зауважте, що існує п’ять типів виносок, зокрема:
`note`, `tip`, `warning`, `caution` та `important`.
:::

::: {.callout-tip}
## Підказка

Приклад виноски з текстом
:::

::: {.callout-caution collapse="true"}
## Розгорніть, щоб дізнатися про згортання

Це приклад «згорнутої» виноски з попередженням.
Використайте `collapse="true"` щоб згорнути її за замовчуванням та `collapse="false"` щоб виноска могла бути згорнута, але була розгорнути за замовчуванням.
:::
```

### Спеціальні символи

+---------------------------------+-------------------------------+
| Синтаксис markdown              | Результат                     |
+=================================+===============================+
|     тире: -                     | тире: -                       |
+---------------------------------+-------------------------------+
|     коротке (середнє) тире: --  | коротке (середнє) тире: --    |
+---------------------------------+-------------------------------+
|     довге тире: ---             | довге тире: ---               |
+---------------------------------+-------------------------------+

::: callout-tip
## Приклади

1. Життя прожити --- не поле перейти (довге тире)
2. 2020--2022 (коротке тире)
3. 25 - 5 (тире)
:::

## Виконання коду
### Налаштування виводу
Існує широкий спектр доступних параметрів для налаштування виводу виконаного коду. Усі ці параметри можна вказати глобально (у YAML-шапці з ключем `execute`) або для кожного блоку коду.

- Приклад глобальних налаштувань:
``` markdown
---
title: "Мій документ"
author: "Ігор Мірошниченко"
execute:
  echo: false
---
```

- Приклад налаштування конкретного чанку:

```{{python}}
#| echo: true

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

x = np.arange(-4, 4, .012)
y = np.arange(-4, 4, .012)
X, Y = np.meshgrid(x, y)
Z = 1 - np.abs(X) - np.sin(Y**2)
W = 1 + Y - np.cos(X**2)

fig = plt.figure(figsize=(8, 8))
ax = fig.add_subplot(projection='polar')
plt.scatter(Z, W, alpha=.03, s=0.2)
plt.axis('off')
plt.show()
```

Параметри налаштування знаходяться у верхній частині блоку під спеціальним коментарем `#|`.

| Налаштування    | Опис                                                                                                            |
|-----------------|-----------------------------------------------------------------------------------------------------------------|
| `eval`          | Оцініть фрагмент коду (якщо `false`, просто відтворіть код).                                                    |
| `echo`          | Показувати код (якщо `false`, код не буде виведено на екран).                                                   |
| `warning`       | Показувати попередження, які виникають під час виконання коду                                                   |
| `error`         | Показувати помилки у документі (це означає, що помилки під час виконання коду не зупинять обробку документа).   |
| `include`       | Запобігає виводу коду та його результатів.                                                                      |


### Вбудований код
Quarto дозволяє виводити результат коду в середині тексту. Це особливо зручно, якщо необхідно щоб документ використовував найсвіжіші розрахунки. Проте синтаксис виводу залежить від рушія (анг. *engine*) Quarto: Jupyter, Knitr або OJS.

#### Jupyter
Щоб включити збережену змінну, використовуєте [IPython.display.Markdown](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html). 

Наприклад, виведемо площу кола за заданим радіусом (`radius`):

```{{python}}
#| echo: false

from IPython.display import Markdown
import math

radius = 10
circle_area = math.pi * pow(radius, 2)

Markdown((f"""
Площа кола з радіусом {radius} дорівнює {round(circle_area, 2)}.
"""
))
```

::: callout-note
## Примітка
Зауважте, що ми використовуємо опцію `echo: false`, щоб  не виводити код у фінальний документ, а тільки результат.
:::

#### Knitr
Аналогічно до роботи з таблицями (див. @sec-py-table) можемо поєднати можливості R та Python для виводу результату коду в тексті документу.

Щоб включити вирази в розмітку для Knitr, використовується вираз у `` `r ` ``:
```{{r}}
#| include: false

library(reticulate)
```

```{{python}}
#| echo: false

import math

radius = 10
circle_area = round(math.pi * pow(radius, 2), 2)
```

```markdown
Площа кола з радіусом  `r⠀py$radius`  дорівнює `r⠀py$circle_area`.
```
::: callout-note
## Примітка
Запис `py$radius` означає: взяти значення змінної Python з ім'ям `radius`.
:::

## Основи публікації
Існує низка способів публікації документів, презентацій і веб-документів, створених за допомогою Quarto. Оскільки вміст, відтворений за допомогою Quarto, використовує стандартні формати (HTML, PDF, MS Word тощо), його можна опублікувати будь-де. Крім того, доступна команда `quarto publish` для легкої публікації в різних популярних службах (GitHub, Netlify, RStudio Connect тощо), а також різні інструменти, які полегшують публікацію з системи Неперервної інтеграції (анг. *Continuous integration*).

Сервіси для публікації:

| Сервіс                                                                     | Опис                                                                                            |
|----------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------|
| [Quarto Pub](https://quarto.org/docs/publishing/quarto-pub.html)           | Публікація документів, веб-сайтів і книг Quarto.                                                |
| [GitHub Pages](https://quarto.org/docs/publishing/github-pages.html)       | Публікація документів за допомогою репозиторію GitHub                                           |
| [RStudio Connect](https://quarto.org/docs/publishing/rstudio-connect.html) | Платформа для безпечного обміну даними в межах організації.                                     |
| [Netlify](https://quarto.org/docs/publishing/netlify.html)                 | Професійна платформа веб-публікації.                                                            |
| [Інші сервіси](https://quarto.org/docs/publishing/other.html)              | Скористайтеся цими сервісами, якщо один із наведених вище методів не відповідає вашим вимогам.  |

: {tbl-colwidths="\[30,70\]"}
