# Базові запити

## SELECT

```{python}
#| file: _common.py
#| include: false
```

```{r}
#| include: false

source('_common.r')
source('_duckdb.r')
```

Давайте напишемо перший запит мовою SQL:
```{sql}
#| connection: con

SELECT *
FROM courier_actions
LIMIT 5
```

Даний запис можна дослівно перекласти:

- `SELECT *`: "взяти все".
- `FROM courier_actions`: з таблиці `courier_actions`.
- `LIMIT 10`: вивести тільки перші 10 спостережень.

Ми можемо написати більш явний запит і отримати той сами результат:
```{sql}
#| connection: con

SELECT 
    action, 
    courier_id, 
    order_id, 
    time
FROM 
    courier_actions
LIMIT 5
```

На практиці таблиці можуть бути дуже великими, тому дуже бажано використовувати функцію `LIMIT` для того щоб не виводити всю таблицю, що може займати магато часу. Крім того, можливо такий запит навіть не буде виконано, оскільки розумні дата інженери заборонили виконувати такі запити.

## ORDER BY

Для сортування значень по будь-якій колонці SQL використовується оператор `ORDER BY` з ключовими словами `ASC` (за зростанням) або `DESC` (за спаданням).

При цьому за умовчанням сортування відбувається за зростанням, тобто `ASC` не обов'язково вказувати. Для сортування за спаданням після `ORDER BY` необхідно явно вказати `DESC`:

```{sql}
#| eval: false

SELECT column_1, column_2
FROM table
ORDER BY column_1           -- сортування за зростанням


SELECT column_1, column_2
FROM table
ORDER BY column_1 ASC       -- сортування за зростанням


SELECT column_1, column_2
FROM table
ORDER BY column_1 DESC      -- сортування за спаданням
```

**Приклад:**
Виведіть всі записи з таблиці `products`, відсортувавши їх за найменуванням товарів *у алфавітному порядку*, тобто. за зростанням. Для сортування використовуйте оператор `ORDER BY`.

Поля у результуючій таблиці: `product_id`, `name`, `price`

::: {.callout-note}
Сортування можна робити не тільки по полях зі значеннями, вираженими числами, але й по полях, значення яких представлені у вигляді тексту, як у нашому випадку.
:::

**Рішення:**
```{sql}
#| connection: con

SELECT product_id,
       name,
       price
FROM   products
ORDER BY name
LIMIT 5
```

## Типові помилки при написанні SQL-запитів.

- Неправильний порядок або помилки у ключових словах. Правильний порядок операторів у запиті виглядає так:

```{sql}
#| eval: false
SELECT      -- перерахування полів результуючої таблиці
FROM        -- вказівка джерела даних
WHERE       -- фільтрація даних
GROUP BY    -- угруповання даних
HAVING      -- фільтрація даних після угруповання
ORDER BY    -- сортування результуючої таблиці
LIMIT       -- обмеження кількості записів, що виводяться
```

- Неправильно названі функції та оператори, що використовуються в запиті (наприклад, `DATEPART`, а не `DATE_PART`).
- Неправильно вказано імена стовпців.
- Неправильно виконано сортування записів.
- Неправильно проведено розрахунки.
- Пропущена кома при перерахуванні стовпців у `SELECT`
- Зайва кома після імені останнього стовпця в `SELECT`
- Не закриті дужки (перевірте, що кількість дужок дорівнює кількості закривають).
- Допущено помилку в підзапиті (перед виконанням всього запиту перевірте, чи працюють окремі підзапити).
- Запущено відразу кілька запитів, не розділених крапкою з комою.

::: {.callout-note}
Зараз деякі пункти можуть бути незрозумілими, але з часом ви розберетеся, про що йдеться.
:::