# Базові запити

## SELECT

```{python}
#| file: _common.py
#| include: false
```

```{r}
#| include: false

source('_common.r')
source('_duckdb.r')
```

Давайте напишемо перший запит мовою SQL:
```{sql}
#| connection: con

SELECT *
FROM courier_actions
LIMIT 5
```

Даний запис можна дослівно перекласти:

- `SELECT *`: "взяти все".
- `FROM courier_actions`: з таблиці `courier_actions`.
- `LIMIT 10`: вивести тільки перші 10 спостережень.

Ми можемо написати більш явний запит і отримати той сами результат:
```{sql}
#| connection: con

SELECT 
    action, 
    courier_id, 
    order_id, 
    time
FROM 
    courier_actions
LIMIT 5
```

На практиці таблиці можуть бути дуже великими, тому дуже бажано використовувати функцію `LIMIT` для того щоб не виводити всю таблицю, що може займати багато часу. Крім того, можливо такий запит навіть не буде виконано, оскільки розумні дата інженери заборонили виконувати такі запити.

::: {.callout-note}
Оператор `FROM` завжди вказується після оператора `SELECT`. У зворотному порядку їх записувати не можна – база даних поверне помилку.
:::

## ORDER BY

Для сортування значень по будь-якій колонці SQL використовується оператор `ORDER BY` з ключовими словами `ASC` (за зростанням) або `DESC` (за спаданням).

При цьому за умовчанням сортування відбувається за зростанням, тобто `ASC` не обов'язково вказувати. Для сортування за спаданням після `ORDER BY` необхідно явно вказати `DESC`:

```{sql}
#| eval: false

SELECT column_1, column_2
FROM table
ORDER BY column_1           -- сортування за зростанням


SELECT column_1, column_2
FROM table
ORDER BY column_1 ASC       -- сортування за зростанням


SELECT column_1, column_2
FROM table
ORDER BY column_1 DESC      -- сортування за спаданням
```

::: {#exm-1}
Виведіть всі записи з таблиці `products`, відсортувавши їх за найменуванням товарів *у алфавітному порядку*, тобто. за зростанням. Для сортування використовуйте оператор `ORDER BY`.

Поля у результуючій таблиці: `product_id`, `name`, `price`

::: {.callout-note}
Сортування можна робити не тільки по полях зі значеннями, вираженими числами, але й по полях, значення яких представлені у вигляді тексту, як у нашому випадку.
:::

**Рішення:**
```{sql}
#| connection: con

SELECT product_id,
       name,
       price
FROM   products
ORDER BY name
LIMIT 5
```
:::
Сортувати результат SQL-запиту можна відразу за декількома колонками, вказуючи їх після `ORDER BY` через кому разом із напрямком сортування (`ASC` або `DESC`):

```{sql}
#| eval: false

SELECT column_1, column_2
FROM table
ORDER BY column_1 DESC, column_2    -- спочатку сортування по першій колонці (за спаданням),
                                    -- потім по другій (за зростанням)
```

::: {.callout-note}
Важливо пам'ятати, що при роботі з великими таблицями потрібно по можливості обмежувати кількість виведених записів, щоб не створювати зайве навантаження на базу даних.
:::

Оператори `ORDER BY` та `LIMIT` можна поєднувати в одному запиті, при цьому оператор `LIMIT` записується та виконується після оператора `ORDER BY`, обмежуючи кількість записів у вже відсортованому результаті:

```{sql}
#| eval: false

SELECT column_1, column_2
FROM table
ORDER BY column_1 DESC, column_2
LIMIT 100
```

::: {#exm-2 .custom}
Відсортуйте таблицю `courier_actions` спочатку по колонці `courier_id` за зростанням id кур'єра, потім по колонці `action` (знову за зростанням), а потім по колонці `time`, але вже за спаданням — від останньої дії до першої. Не забудьте включити колонку `order_id`.

Додайте в запит оператор `LIMIT` та виведіть лише **перші 1000 рядків** результуючої таблиці.

Поля у результуючій таблиці: `courier_id`, `order_id`, `action`, `time`.

::: {.callout-note}
Як ви вже здогадалися, сортувати таблиці можна навіть по полях з датами та часом.
:::

```{sql}
#| connection: con

SELECT courier_id,
       order_id,
       action,
       time
FROM   courier_actions
ORDER BY courier_id, action, time DESC limit 1000
```
:::

Ось ми й розібралися, як працюють оператори `ORDER BY` та `LIMIT`.

Зараз важливо запам'ятати порядок запису всіх відомих нам ключових слів:

1. `SELECT`
2. `FROM`
3. `ORDER BY`
4. `LIMIT`

Також важливо зрозуміти, що порядок їх виконання дещо відрізняється від того, в якій послідовності вони вказуються в SQL-запиті:

1. Спочатку виконується оператор `FROM` – відбувається вибір потрібної таблиці.
2. Потім `SELECT` - відбираються вказані стовпці.
3. Потім `ORDER BY` - проводиться сортування результуючої таблиці.
4. І наприкінці `LIMIT` — обмежується кількість записів, що виводяться.

::: {#exm-3 .custom}
Використовуючи оператори `SELECT`, `FROM`, `ORDER BY` та `LIMIT`, визначте 5 найдорожчих товарів у таблиці `products`, які доставляє наш сервіс. Виведіть їх найменування та ціну.

Поля у результуючій таблиці: `name`, `price`.

```{sql}
#| connection: con

SELECT name,
       price
FROM   products
ORDER BY price desc limit 5
```
:::

## AS
При складанні SQL-запитів колонкам у результуючій таблиці можна надавати будь-які інші імена (їх ще називають «аліасами»). Це можна робити за допомогою оператора `AS`:

```{sql}
#| eval: false

SELECT name AS new_name
FROM table
```

Якщо раптом вам здасться, що на написання оператора `AS` йде занадто багато часу і сил, його можна опустити, вказавши нове ім'я колонки без нього. Наступний запис також спрацює:

```{sql}
#| eval: false

SELECT name new_name
FROM table
```

::: {#exm-4}
Повторіть запит із попереднього завдання @sec-example-order-3, але тепер колонки `name` і `price` перейменуйте відповідно на `product_name` і `product_price`.

Поля у результуючій таблиці: `product_name`, `product_price`

```{sql}
#| connection: con

SELECT name AS product_name,
       price AS product_price
FROM   products
ORDER BY price desc limit 5
```
:::





## Типові помилки при написанні SQL-запитів.

- Неправильний порядок або помилки у ключових словах. Правильний порядок операторів у запиті виглядає так:

```{sql}
#| eval: false

SELECT      -- перерахування полів результуючої таблиці
FROM        -- вказівка джерела даних
WHERE       -- фільтрація даних
GROUP BY    -- угруповання даних
HAVING      -- фільтрація даних після угруповання
ORDER BY    -- сортування результуючої таблиці
LIMIT       -- обмеження кількості записів, що виводяться
```

- Неправильно названі функції та оператори, що використовуються в запиті (наприклад, `DATEPART`, а не `DATE_PART`).
- Неправильно вказано імена стовпців.
- Неправильно виконано сортування записів.
- Неправильно проведено розрахунки.
- Пропущена кома при перерахуванні стовпців у `SELECT`
- Зайва кома після імені останнього стовпця в `SELECT`
- Не закриті дужки (перевірте, що кількість дужок дорівнює кількості закривають).
- Допущено помилку в підзапиті (перед виконанням всього запиту перевірте, чи працюють окремі підзапити).
- Запущено відразу кілька запитів, не розділених крапкою з комою.

::: {.callout-note}
Зараз деякі пункти можуть бути незрозумілими, але з часом ви розберетеся, про що йдеться.
:::

@exm-1

@exm-2