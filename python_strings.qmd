# Рядки: `str`


## Рядки та їх незмінюваність
Ми вже познайомилися з ідеєю змінюваних і незмінних об'єктів у Python ([див. @sec-mutable-immutable]). Які практичні наслідки виникають з того факту, що рядки, на відміну від списків, є незмінними об'єктами?

Щоб показати, що рядки є незмінюваними об'єктами, ми можемо використати такий приклад коду:

```{python}
#| error: true

my_string = "abcde"
my_string[0] = "f"
```

Коли ми запустимо цей код, ми отримаємо повідомлення про помилку `TypeError`, яке свідчить про те, що рядковий об'єкт не підтримує присвоєння елементу. Це відбувається тому, що в Python рядки - це незмінні об'єкти, їх не можна змінювати після створення. Якщо ми хочемо створити новий рядок на основі існуючого, то ми повинні створити новий об'єкт рядка. Наприклад, ми можемо створити новий рядок, який замінює перший символ рядка "a" на символ "f", використовуючи такий код:

```{python}
my_string = "abcde"
new_string = "f" + my_string[1:]
print(new_string)
```

Це створить новий рядок через використання рядка `"f"` і всіх символів з оригінального рядка, починаючи з індексу 1. Результатом буде рядок `"fbcde"` - новий рядок, який ми можемо використовувати далі в нашій програмі.

Щоб остаточно закріпити відмінності в роботі зі змінюваними і незмінюваними об'єктами, давайте порівняємо списки і рядки:

```{python}
my_str = "Hello, world!"
print(my_str.lower()) # поверне нам новий рядок
```

```{python}
my_list = [3, 2, 1]
print(my_list.append(4)) # нічого не поверне, змінить my_list
print(my_list)
```

Жоден метод не змінить змінну `my_str`, а ось різні методи списків можуть змінити структуру списку `my_list`.

## Форматування рядків

**F-рядки** в Python - це спосіб форматування рядків, що з'явився у версії Python 3.6. Використовуючи f-рядки, ви можете вставляти значення змінних або виразів прямо в рядок. Для цього необхідно задавати змінні всередині фігурних дужок `{}` всередині рядка, перед якими потрібно поставити приставку `"f"`. Ось приклад:

```{python}
name = "Alice"
age = 25
print(f"My name is {name} and I am {age} years old")
```

Як бачите, змінні `name` і `age` були вставлені в рядок прямо всередині фігурних дужок. Ви також можете використовувати вирази всередині f-рядків, наприклад, так:

```{python}
x = 5
print(f"The value of x squared is {x**2}")
```

F-рядки роблять код більш читабельним і зручним, особливо коли ви працюєте з багатьма змінними і значеннями. Якщо ви працюєте з більш ранньою версією Python, то корисно знати і про інші методи форматування.

1. За допомогою оператора %

Цей спосіб форматування рядків уже застарів, але все ще використовується в деяких старих проектах. Синтаксис схожий на форматування рядків у мові C, де `%s` використовується для вставки рядка, а `%d` для вставки числа:

```{python}
name = "Alice"
age = 25
print("My name is %s and I am %d years old" % (name, age))
```

2. За допомогою методу `format`

Це метод рядка, який дає змогу форматувати текст, замінюючи вхідні аргументи всередині фігурних дужок `{}`. Ось приклад використання методу `format()`:

```{python}
name = "Олексій"
age = 30
print("Моє ім'я {}. Мені {} років.".format(name, age))
```

Знаки `{}` у рядку були замінені на змінні, які були передані в метод `format()`. Це дає змогу створювати динамічні рядки, які змінюються залежно від змінних, переданих у метод `format()`. Можна використовувати індекси для заміни змінних:

```{python}
name = "Олексій"
age = 30
print("Моє ім'я {1}. Мені {0} років.".format(name, age))
```

Тут ми використовували індекс `1` для заміни змінної `age`, індекс `0` - для змінної `name`. Це може бути корисно, якщо потрібно змінювати порядок виведення змінних у рядку. Крім того, можна використовувати іменовані аргументи для заміни:

```{python}
print("Моє ім'я {name}. Мені {age} років.".format(name='Алексей', age=30))
```

## Методи рядків

Як і у списків, множин і словників, у рядків також є різні методи, які допомагають нам працювати з ними. Немає сенсу заучувати напам'ять усі методи. Але якщо ви зіткнулися із завданням, у якому необхідно попрацювати з рядками, спочатку обов'язково перевірте, можливо, вже є метод, який вам допоможе:

1. `capitalize()` - робить першу букву рядка великою, а всі інші - малими:

```{python}
string = "hello, world!"
capitalized_string = string.capitalize()
print(capitalized_string)
```

2. `count(substring[, start[, end]])` - повертає кількість входжень підрядка в рядок. Необов'язкові параметри `start` і `end` задають діапазон пошуку:

```{python}
string = "brown fox jumps over a lazy dog"
count = string.count("o")
print(count)
```

3. `replace(old, new[, count])` - замінює всі входження одного підрядка на інший. Необов'язковий параметр `count` задає максимальну кількість замін:

```{python}
string = "hello, world!"
new_string = string.replace("world", "there")
print(new_string)
```

4. `split([separator[, maxsplit]])` - розбиває рядок на список підрядків, розділених роздільником `separator`. Необов'язковий параметр `maxsplit` задає максимальну кількість розбиття:

```{python}
string = "a, b, c, d"
list_of_strings = string.split(", ")
print(list_of_strings)
```

5. `strip([chars])` - видаляє з початку і кінця рядка зазначені символи. Якщо символи не вказані, видаляються всі пробільні символи:

```{python}
string = "   hello, world!   "
new_string = string.strip()
print(new_string)
```

6. `join(iterable)` - об'єднує список рядків в один рядок, розділяючи їх зазначеним роздільником:

```{python}
list_of_strings = ["a", "b", "c", "d"]
string = ", ".join(list_of_strings)
print(string)
```

## Завдання для самостійної роботи

::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-str-01}
<br>
У змінних `str_1` і `str_2` збережено два рядки. Якщо рядки містять однакові літери, вам потрібно зберегти у змінну `is_the_same_letters` значення `True`, якщо літери в рядках відрізняються - збережіть у змінну значення `False`.

Ми не враховуємо порядок букв, їхню кількість і регістр.

**Приклад:**

```{{python}}
str_1 = 'AaB'
str_2 = 'Ab'
is_the_same_letters = True 

str_1 = 'Aa'
str_2 = 'AaB'
is_the_same_letters = False
```

::: {.callout-note collapse="true"}
## Підказка

Подивіться, що вийде, якщо застосувати `set` до рядка: `set(str_1)`, як нам може це допомогти з рішенням?
:::

```{python}
#| code-fold: true
#| code-summary: "Рішення"

str_1 = 'AaB'
str_2 = 'Ab'

is_the_same_letters = set(str_1.lower()) == set(str_2.lower())
```

::::
:::::

::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-str-02}
<br>
У змінній `x` міститься число з десятковою частиною але у форматі рядка. У змінну `y` збережіть ціле число, яке дорівнює десятковій частині числа `x`.

**Приклад:**

```{{python}}
x = 3.14 
y = 14 

x = 2.02 
y = 2
```

::: {.callout-note collapse="true"}
## Підказка

Подумайте, які методи рядків допоможуть нам у цьому завданні.
:::

```{python}
#| code-fold: true
#| code-summary: "Рішення"

x = 3.14

y = int(str(x).split('.')[1])
```

::::
:::::

::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-str-03}
<br>
Дано два рядки `str_1` і `str_2`. Збережіть у `result` `True`, якщо `str_1` є анаграмою `str_2`, і `False` в іншому випадку. Регістр літер (велика чи маленька буква) не повинен впливати на роботу програми. Тобто `'Літо'` і 'Тіло' 'це валідна анаграма.

Анаграма - це слово або фраза, утворена шляхом перестановки літер іншого слова або фрази, зазвичай з використанням усіх вихідних літер рівно один раз.

**Приклад:**

```{{python}}
str_1 = "Привіт"
str_2 = "Провал"
result = False

str_1 = "Літо"
str_2 = "Тіло"
result = True
```

::: {.callout-note collapse="true"}
## Підказка

Спробуйте застосувати функцію `sorted()` до рядка.
:::

```{python}
#| code-fold: true
#| code-summary: "Рішення"

str_1 = "Привіт"
str_2 = "Провал"

result = sorted(str_1.lower()) == sorted(str_2.lower())
```

::::
:::::

::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-str-04}
<br>
У змінну `a` збережено деяке речення, у якому можуть бути додані зайві пробіли. Напишіть програму, яка прибиратиме з `a` зайві пропуски і зберігатиме результат у змінну `result`. 
Усі слова мають бути розділені одним пропуском, а на початку та наприкінці речення пропусків бути не повинно.

**Приклад:**

```{{python}}
a = "Я вивчаю нову мову програмування.   "
result = "Я вивчаю нову мову програмування."
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

a = "Я вивчаю нову мову програмування.   "

result = ' '.join(a.split())
```

::::
:::::

::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-str-05}
<br>
Напишіть програму, ґрунтуючись на введенні та виведенні в прикладах. Введенням буде рядок `a`. Результат збережіть у `result`.

**Приклад:**

```{{python}}
a = "div*2"
result = "<div></div><div></div>"

a = "p*1" 
result = "<p></p>"

a = "li*3"
result = "<li></li><li></li><li></li>"
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

a = "div*2"

string, number = a.split('*')
result = f"<{string}></{string}>" * int(number)
```

::::
:::::

::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-str-06}
<br>
Напишіть програму, яка прийматиме рядок зі слів і повертатиме рядок, у якому ці слова будуть відсортовані в [лексикографічному порядку](https://uk.wikipedia.org/wiki/%D0%9B%D0%B5%D0%BA%D1%81%D0%B8%D0%BA%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D1%96%D1%87%D0%BD%D0%B8%D0%B9_%D0%BF%D0%BE%D1%80%D1%8F%D0%B4%D0%BE%D0%BA). Початковий рядок міститься у змінній `x`, результат збережіть у `result`. 

**Приклад:**

```{{python}}
x = 'Світ надзвичайно широкий має укладисті далі'
result = 'Світ далі має надзвичайно широкий укладисті'
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

x = 'Світ надзвичайно широкий має укладисті далі'

result = ' '.join(sorted(x.split()))
```

::::
:::::

::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-str-07}
<br>
Порахуйте, скільки разів у реченні `x` зустрічається рядок `y`. Результат збережіть у змінну `result`.

**Приклад:**

```{{python}}
x = 'На підвіконні у вітальні в бабусі росли квіти, квіти були червоні та жовті, дуже гарні квіти.'
y = 'квіти'
result = 3
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

x = 'На підвіконні у вітальні в бабусі росли квіти, квіти були червоні та жовті, дуже гарні квіти.'
y = 'квіти'

result = x.count(y)
```

::::
:::::

::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-str-08}
<br>
Напишіть програму, яка прийматиме номер кредитної картки `card` і повертатиме номер картки, у якому буде видно тільки останні 4 цифри. Інші цифри мають замінюватися зірочками. Результат збережіть у `result`.

**Приклад:**

```{{python}}
card = '5468350018455833'
result = '************5833'
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

card = '5468350018455833'

result = '*' * 12 + card[-4:]
```

::::
:::::

::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-str-09}
<br>
У змінній `а` збережено речення. Видаліть із речення всі входження слова або символу `b`. Результат збережіть у `result`.  

**Приклад:**

```{{python}}
a = 'Вечірнє сонце, дякую за день!'
b = 'e'
result = 'Вчірнє сонц, дякую за днь!'
```


```{python}
#| code-fold: true
#| code-summary: "Рішення"

a = 'Вечірнє сонце, дякую за день!'
b = 'е'

result = a.replace(b, '')
```

::::
:::::