# Змінні та типи даних

```{python}
#| label: library
#| include: false

import matplotlib.pyplot as plt
```

## Змінні

Почнемо зі створення змінних. **Змінна** - це ім'я, яке використовується для зберігання даних в пам'яті комп'ютера. Для створення змінних ми пишемо назву змінної, ставимо знак рівності (`=`) та пишемо значення, яке ми хочемо зберегти у змінну, наприклад:

```{python}
my_name = 'Ihor'
prog_language = 'Python'
has_guitar = True
n_guitar = 2
```

При виборі імені змінної давайте дотримуватись певних правил, щоб наш код виконувався без помилок та його було зручно читати:

- Ім'я змінної починається з літери;
- Для імен змінних використовуватимемо маленькі літери з підкресленням замість пробілу;
- Ім'я змінної не повинно співпадати з назвою ключових слів Python. Наприклад, назвати змінну `if` або `True` – погана ідея. Ключових слів не так багато, з частиною ми скоро познайомимося.

```
False      await      else       import     pass
None       break      except     in         raise
True       class      finally    is         return
and        continue   for        lambda     try
as         def        from       nonlocal   while
assert     del        global     not        with
async      elif       if         or         yield
```

:::: {.callout-note icon=false}
## Завдання
::: {#exr-py-basic-01}
<br>
Давайте запрограмуємо кота! Створіть три змінні:

1. `cat_name` з рядком як мінімум із двох символів
2. `cat_age` з невід'ємним числом
3. `is_fluffy` з Tr`ue або `False`

```{python}
#| code-fold: true
#| code-summary: "Рішення"

cat_name = 'Azmodan'
cat_age = 2
is_fluffy = True
```

:::
::::


## Арифметичні операції

Давайте спробуємо виконати арифметичні операції над змінними. Для цього використовуємо знаки арифметичних операцій:

- `+`: додавання
- `-`: віднімання
- `*`: множення
- `**`: зведення в ступінь
- `/`: розподіл
- `//`: цілочислове ділення, арифметична операція, результатом якої є ціла частина частки, отриманого поділом одного цілого числа на інше ціле число
- `%`: залишок від ділення

Для визначення порядку операцій будемо використовувати круглі дужки, як і у звичайній арифметиці.

```{python}
# Квадрат суми a та b розділимо на різницю a та b
a = 3
b = 4
d = (a + b) ** 2 / (a - b)
print(d)
```

::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-basic-02}
<br>
Давайте напишемо програму для пошуку довжини гіпотенузи. Створіть змінні `a` та `b`, в яких будуть записані довжини катетів прямокутного трикутника. Після чого розрахуйте `c` і збережіть у ній довжину гіпотенузи цього трикутника.

::: {.callout-note collapse="true"}
## Підказка

Для розрахунку довжини гіпотенузи використовуйте [теорему Піфагора](https://uk.wikipedia.org/wiki/%D0%A2%D0%B5%D0%BE%D1%80%D0%B5%D0%BC%D0%B0_%D0%9F%D1%96%D1%84%D0%B0%D0%B3%D0%BE%D1%80%D0%B0). А операція квадратного кореня аналогічна зведенню в ступінь 0.5.
:::

```{python}
#| code-fold: true
#| code-summary: "Рішення"

c = (a**2 + b**2)**0.5
```

::::
:::::



::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-basic-03}
<br>
У змінній `father_age` зберігається вік батька, а змінної `son_age` — вік сина. Порахуйте, через скільки років батько буде вдвічі старшим за сина. Результат збережіть змінну `result`.

**Приклад:**

```
father_age = 20
son_age = 3
result = 14

father_age = 30.5
son_age = 5.1
result = 20.3
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

father_age = 20
son_age = 3
result = father_age - 2 * son_age
```

::::
:::::



::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-basic-04}
<br>
Задані дійсні числа `a`, `b` та `с` – сторони трикутника. Обчисліть периметр та площу трикутника. Результат збережіть у змінні `perimeter` та `area` відповідно.

**Приклад:**

```
a = 3
b = 4
c = 5

perimeter = 12
area = 6
```

$$ S = \sqrt{p(p-a)(p-b)(p-c)} $$
$$ p = \frac{a+b+c}{2} $$

```{python}
#| echo: false

# Визначте координати вершин трикутника (x, y)
x_coords = [1, 4, 2]
y_coords = [1, 2, 4]

# Накресліть трикутник
plt.plot(x_coords + [x_coords[0]], y_coords + [y_coords[0]], marker='o')

# Додайте текст для позначення країв
plt.text((x_coords[0] + x_coords[1]) / 2, (y_coords[0] + y_coords[1]) / 2, 'C', ha='center', va='bottom')
plt.text((x_coords[1] + x_coords[2]) / 2, (y_coords[1] + y_coords[2]) / 2, 'B', ha='center', va='bottom')
plt.text((x_coords[0] + x_coords[2]) / 2, (y_coords[0] + y_coords[2]) / 2, 'A', ha='center', va='bottom')

# Відобразіть графік
plt.grid(False)
plt.axis('off')
plt.show()
```

::: {.callout-note collapse="true"}
## Підказка

Периметр – це сума довжин усіх сторін. Площу трикутника по трьох сторонах можна обчислити за допомогою [формули Герона](https://ru.wikipedia.org/wiki/%D0%A4%D0%BE%D1%80%D0%BC%D1%83%D0%BB%D0%B0_%D0%93%D0%B5%D1%80%D0%BE%D0%BD%D0%B0). Квадратний корінь - це зведення у ступінь 0.5.

А ви знали, що Формула Герона міститься в «Метриці» Герона Олександрійського (I століття н. е.) і названа на його честь (хоча вона була відома ще Архімеду). Герон цікавився трикутниками з цілими сторонами, площі яких теж є цілими, такі трикутники звуться героновими, найпростішим героновим трикутником є єгипетський трикутник.
:::

```{python}
#| code-fold: true
#| code-summary: "Рішення"

a = 3
b = 4
c = 5

perimeter = a + b + c
p = perimeter * 0.5
area = (p * (p-a) * (p - b) * (p - c)) ** 0.5
```

::::
:::::



::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-basic-05}
<br>
У змінну `n` збережено ціле число – кількість секунд. Напишіть програму, яка конвертує задану кількість секунд `n` на години, хвилини та секунди. Результат збережіть у змінні `hours`, `minutes`, `seconds`.

Тобто спочатку потрібно порахувати, скільки в число n помістилося цілих годин, цілих хвилин і скільки після цього залишилося секунд. Розглянемо приклад:

```
n = 125

hours = 0
minutes = 2
seconds  = 5
```

::: {.callout-note collapse="true"}
## Підказка

Вам може допомогти цілочислове ділення `//` залишок від ділення `%`.
:::

```{python}
#| code-fold: true
#| code-summary: "Рішення"

n = 125
hours = n // 3600
minutes = (n % 3600) // 60
seconds = n % 60
```

::::
:::::



## Функції `round` та `abs`

Познайомимося з двома корисними функціями: `round` та `abs`.

`round()` — функція округлення числа до вказаної кількості знаків після коми.

```{python}
# Округлення до 2 знаків після коми
number = 3.14159
result = round(number, 2)
print(result)
```

`abs()` – функція, яка повертає абсолютне значення числа.


```{python}
number = -10
result = abs(number)
print(result)
```

::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-basic-06}
<br>
У змінній `price_new` зберігається ціна кілограма бананів у числовому форматі, а змінної `price_old` — ціна кілограма бананів рік тому. Обчисліть, скільки відсотків за модулем змінилася ціна протягом року. Результат збережіть у змінну `result`. Результат округліть до двох знаків після коми.

**Приклад:**

```
price_new = 89.99 
price_old = 75.50
result = 19.19


price_new = 24
price_old = 72
result = 66.67
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

price_new = 89.99
price_old = 75.50
result = round(abs(price_new - price_old) / price_old * 100, 2)
```

::::
:::::



## Типи даних

У Python ми можемо змінювати тип даних, які зберігаються в нашій змінній. Така операція називається перетворенням типів. Для перетворення типів Python надає ряд вбудованих функцій:

- `int()`: перетворює значення на ціле число
- `float()`: перетворює значення на число з плаваючою точкою
- `str()`: перетворює значення в рядок
- `bool()`: перетворює на логічний тип

Розглянемо кілька прикладів:

```{python}
#| eval: false

# з цілого числа в рядок
a = 42 # ціле число 42
str(a) # отримуємо рядок '42'

# з цілого числа в рядок
a = 42 # ціле число 42
str(a) # отримуємо рядок '42'

# з рядка в ціле число
a = '42'
b = int(a) # отримуємо 42

# з логічного типу до числа
a = True
b = int(a) # отримуємо 1

# і навпаки
a = 1
b = bool(a) # отримуємо True
```

Однак далеко не завжди перетворення типів проходить без помилок, наприклад, ми не зможемо зробити таке перетворення:

```{python}
#| error: true
a = 'my number is 42'
b = int(a) # отримаємо помилку
```

Це означає, що рядок `'my number is 42'` не може бути відразу представлена як ціле число. Ми могли б взяти з цього рядка лише число `42` і перевести його до цілого числа. Скоро ми навчимося так робити.

::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-basic-07}
<br>
Створіть змінні:

- `a` зі значенням `5` типу `int`
- `b` зі значенням `'10'` типу `str`
- `c` із значенням `True` типу `bool`.

У змінну `my_sum` збережіть суму трьох змінних, які ви створили, перетворивши `b` і з типу `int`.

```{python}
#| code-fold: true
#| code-summary: "Рішення"

a = 5
b = '10'
c = True
my_sum = a + int(b) + int(c)
```

::::
:::::



::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-basic-08}
<br>
У змінній `a` збережено число з десятковою частиною у форматі рядка, наприклад `'3.14'`. У змінну збережіть цілу частину з числа змінної `a`.

**Приклади:**

```
a = '3.14'
c = 3

a = '99.9'
c = 99

a = '0.33'
c = 0
```
::: {.callout-note collapse="true"}
## Підказка

Все, що нам потрібно зробити, це перекласти змінну `a` в `int`. Відразу рядок `'3.14'` в `int` перекласти не вийде, подумайте, який тип потрібно перевести змінну на першому етапі?
:::

```{python}
#| code-fold: true
#| code-summary: "Рішення"

a = '3.14'
c = int(float(a))
```

::::
:::::



::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-basic-09}
<br>
У змінній `x` збережено ціле позитивне число. Обчисліть `x + x0x0x`. Результат збережіть змінну `result`.

Тобто якщо `x = 2`, то потрібно обчислити `2 + 20202`.

::: {.callout-note collapse="true"}
## Підказка

Спробуйте скласти два рядки за допомогою знака `+`
:::

```{python}
#| code-fold: true
#| code-summary: "Рішення"

x = 2
result = x + int(str(x) + '0' + str(x) + '0' + str(x))

# або
result = x + int(f'{x}0{x}0{x}') # але про це пізніше
```

::::
:::::

## Оператори порівняння

Змінні та значення можна порівнювати між собою за допомогою операцій порівняння:

- `x < y`: `x` строго менше `y`,
- `x <= y`: `x` менше або дорівнює `y`,
- `x > y`: `x` строго більше `y`,
- `x >= y`: `x` більше або дорівнює `y`,
- `x == y `: `x` дорівнює `y`,
- `x != y`: `x` не дорівнює `y`.

Порівнювати можна і числа, і рядки. Результат порівняння - це `True` або `False`, залежно від того, чи вірний або невірний вираз написано. З порівнянням чисел усе зрозуміло:

```{python}
print(3 > 2)
```

```{python}
print(3 < -5)
```

```{python}
print(5 != 6)
```

```{python}
print(10 == 10)
```

Порівняння рядків влаштовано трохи хитріше. Почнемо з простого та розглянемо порівняння двох однакових рядків:

```{python}
print('abc' == 'abc')
```

А якщо записати так:

```{python}
print('abc' > 'abc')
```

Давайте розберемося, чому `'abc' > 'aba'` поверне нам `True`. Порівняння рядків у Python відбувається лексикографічно, тобто посимвольно зліва направо. Якщо символи збігаються, Python переходить до наступного символу в рядку і продовжує порівняти доти, доки не знайде різниця між символами в рядку. Якщо символи в рядках різняться, то Python визначає, який рядок "більше" (за алфавітом, у прямому значенні за номером в алфавіті). Якщо символи до цієї позиції збігаються, то рядок, у якого наступний символ більший, вважається "більшим". При цьому, якщо літери збігаються, то також враховується розмір, маленька літера більша за великий `'a' > 'A'` . Розглянемо приклади:

```{python}
str1 = 'hello'
str2 = 'world'
print(str1 < str2 ) 
```

```{python}
str1 = 'apple'
str2 = 'banana'
print(str1 > str2) 
```

```{python}
str1 = 'abc'
str2 = 'aba'
print(str1 > str2 ) 
```

::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-basic-10}
<br>
Вкажіть усі порівняння, внаслідок яких ми отримаємо `True`.

- [ ] `'ІВАН' < 'іван'`
- [ ] `'Python' < 'R'`
- [ ] `'big number' != 'bug number'`
- [ ] `'ЯЯЯ' == 'Я Я'`
- [ ] `'гірка' >= 'зірка'`

::: {.callout-note collapse="true"}
## Підказка

Якщо ви сумніваєтеся, виконайте ці порівняння в Python і подивіться на результат.
:::

::: {.callout-note collapse="true"}
## Правильні відповіді

- [x] `'ІВАН' < 'іван'`: розмір букв відіграє роль при порівнянні, хоч це й однакове слово, але маленький "іван" більше.
- [x] `'Python' < 'R'`: порівняння відбувається за першим символом, `'R'` стоїть в алфавіті правіше, значить `'R' > 'P'`, отримуємо `True`
- [x] `'big number' != 'bug number'`: рядки різняться в одному символі, отримуємо `True`
- [ ] `'ЯЯЯ' == 'Я Я'`: пробіли грають роль при порівнянні, пробіл буде менше будь-якого символу. Отримуємо `False`.
- [ ] `'гірка' >= 'зірка'`: порівняння відбувається за першим символом, `'з'` більше ніж `'г'`, отримуємо `False`
:::

::::
:::::



## Логічні операції `AND`, `OR` та `NOT`

Працюючи з логічними умовами можемо використовувати логічні операції `AND`, `OR` і `NOT`.

1. Оператор `AND` — повертає `True`, якщо обидва вирази вірні, і `False` в протилежному випадку.

```{python}
a = 5
b = 10
c = 15
print(a < b and b < c)
```

```{python}
print(a < b and b > c)
```

2. Оператор `OR` — повертає `True`, якщо хоча б один з виразів вірний, і `False` в протилежному випадку.

```{python}
age = 17
print(age < 18 or age > 60)
```

```{python}
print(age < 16 or age > 60)
```

3. Оператор `NOT` — інвертує логічний вираз. Якщо вираз істинний, то результат буде `False`, і навпаки.

```{python}
is_admin = True
print(not is_admin)
```

::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-basic-11}
<br>
У змінній `m` зберігається ціле позитивне число – тривалість сну в хвилинах. Якщо тривалість сну становитиме **від 7 до 9 години включно**, то в змінну `optimal_sleep_duration` збережіть значення `True`. В іншому випадку призначте це змінною значення `False`.

Приклад:
```
m = 410  
optimal_sleep_duration = False

m = 500
optimal_sleep_duration = True
```
```{python}
#| code-fold: true
#| code-summary: "Рішення"

m = 410
optimal_sleep_duration = m / 60 >= 7 and m / 60 <= 9

# або
optimal_sleep_duration = 7 * 60 <= m <= 9 * 60
```

::::
:::::

::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-basic-12}
<br>
У змінній `x` зберігається ціле число. Перевірте, чи це число **ділиться без залишку** на `3` і на `7`. Результат збережіть в змінну `result`. Змінна результат повинен мати **логічний тип даних**.

Приклад: 
- якщо `x = 7`, то `result = False`.
- якщо `x = 21`, то `result = True`.

```{python}
#| code-fold: true
#| code-summary: "Рішення"

x = 21
result = x % 3 == 0 and x % 7 == 0
```

::::
:::::



## Спеціальні символи в рядках

Ми вже знаємо, що для створення рядка достатньо використовувати подвійні чи одинарні лапки. Все, що знаходиться всередині лапок, сприйматиметься як рядок.

```{python}
string1 = 'Hello, world!'
string2 = "I'm a Python Data Scientist"
```

Якщо ми виведемо `string1` і `string2` на друк за допомогою функції `print()`, то побачимо на екрані всі символи, які ми помістили всередині лапок. Але це завжди так. У Python, як і в більшості мов програмування, у рядках можуть бути використані **спеціальні символи**. Вони називаються екранованими послідовностями.

Ось деякі з найбільш часто використовуваних екранованих послідовностей у Python:

- `\n` — перенесення рядка
- `\t` - табуляція
- `\'` - одинарна лапка
- `\"` - подвійна лапка
- `\\` — зворотний слеш

Розберемо їх використання відразу на прикладі:

```{python}
string1 = '\'Manchester City\' - чемпіон Англії!\n2023'
print(string1)
```

Таким чином, коли у рядку з'являється зворотний слеш `\`, програма чекає після нього спеціальний символ. Сам зворотний слеш не виводиться на друк. А символ після слеша вже інтерпретується, наприклад, як перенесення рядка чи відступ. 

Подивіться ще приклади:

```{python}
print("Hello\nworld!")
```

```{python}
print("C:\\Users\\user\\Desktop\\file.txt")
```

```{python}
print("Name:\tJohn")
```

```{python}
print('It\'s a beautiful day!')
```

```{python}
print("It's a beautiful day!")
```



::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-basic-13}
<br>
Збережіть у змінний `square` рядок, який виводить на екран **прямокутник 4 х 4**, сформований із зірочок, розділених пробілом.

```
print(square)

* * * *
* * * *
* * * *
* * * *
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

square = '* * * *\n' * 4
```

::::
:::::
