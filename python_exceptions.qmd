# Помилки та винятки

## SyntaxError

Винятки в Python, як і в інших мовах програмування, відносяться до проблем у вашому коді.

Почнемо з простого прикладу: створимо файл `hello.py`:

```{.bash filename="Terminal"}
code cat.py
```

Напишемо простий код з помилкою:

```{python}
#| label: hello.py-1
#| error: true

print("Привіт, світ!)
```

Ми отримали помилку `SyntaxError`, яка означає, що Python не зміг зрозуміти наш код. Це найпростіший вид помилки, який можна виправити, виправивши помилку в коді. Запис `unterminated`", як правило, означає, що я щось почав, але не зупинив. Запис `string` - це послідовність символів, з якою ми вже знайомі. А `literal` зазвичай відноситься до того, що ви буквально набрали.

Отже вирішення цієї помилки дуже просте: додайте закриваючу лапку:

```{python}
#| label: hello.py-2

print("Привіт, світ!")
```

Отже, проблема з синтаксичними помилками полягає в тому, що їх вирішення повністю залежить від вас.

## ValueError

Але в Python є багато інших типів помилок, які можна назвати `RuntimeError`, які трапляються під час роботи вашого коду. І саме від вас залежить написання додаткового захисного коду для виявлення таких помилок. 

Наприклад, давайте створимо файл `number.py`, яка буде приймати число від користувача і виводити це число на екран:

```{.bash filename="Terminal"}
code number.py
```

```{python}
#| label: number-eval-int
#| eval: false

number = int(input("Введіть число: ")) # 5
print(f'Ваше число: {number}')
```

```{python}
#| label: number-eval-int
#| echo: false

number = 5
print(f'Ваше число: {number}')
```

Але що станеться, якщо користувач введе не число, а текст? Наприклад, введе слово `п'ять`:

```{python}
#| label: number-eval-str
#| eval: false

number = int(input("Введіть число: ")) # п'ять
print(f'Ваше число: {number}')
```

```{python}
#| label: number-eval-str
#| echo: false
#| error: true

number = int('п\'ять')
print(f'Ваше число: {number}')
```

Ми отримали помилку `ValueError`, яка означає, що ми передали функції `int` значення, яке вона не може перетворити на число. Це вже не синтаксична помилка, а помилка виконання, яка виникає під час виконання програми. І вирішення цієї помилки вже не залежить від вас, а від користувача, який вводить дані. Тому вам потрібно написати додатковий код, який буде перевіряти введені дані на коректність.
