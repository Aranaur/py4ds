# Фільтрація даних

Фільтрація даних дозволяє включати в результуючий запит не всі рядки вихідної таблиці, а лише ті, що відповідають заздалегідь заданій умові.

## WHERE

В SQL для фільтрації даних використовується оператор `WHERE`. Після оператора `WHERE` вказується логічний вираз, результат якого визначає, чи буде рядок включений до результуючої таблиці. Якщо умова виявляється істинною (`TRUE`), то рядок включається до результату, якщо хибним (`FALSE`) — рядок виключається.

Таким чином, кожен рядок у таблиці проходить перевірку на відповідність певній умові, і в результаті цих перевірок формується таблиця, над якою проводяться операції, зазначені в блоці `SELECT`.

Оператор `WHERE` та логічний вираз вказуються після блоку `FROM`:

```{.sql}
SELECT column_1, column_2
FROM table
WHERE column_2 >= 0
```

Наприклад, у результаті зазначеного вище запиту у вибірці попадуть лише записи з невід'ємними значеннями в колонці `column_2`.

У свою чергу оператори `ORDER BY` і `LIMIT` записуються вже після оператора `WHERE`. Якщо додати їх у приклад вище, запит виглядатиме так:

```{.sql}
SELECT column_1, column_2
FROM table
WHERE column_2 >= 0
ORDER BY column_1
LIMIT 100
```

У результаті ми спочатку відфільтруємо необхідні нам рядки, потім виберемо стовпчики, виділені в `SELECT`, а потім сортуємо результуючу таблицю, обмеживши число виведених записів.

Таким чином порядок запису відомих нам на поточний момент ключових слів виглядає так:

1. `SELECT`
2. `FROM`
3. `WHERE`
4. `ORDER BY`
5. `LIMIT`

Знову звернемо увагу, що порядок виконання відрізняється від того, в якій послідовності вони вказуються в запиті:

1. Спочатку виконується оператор `FROM` – відбувається вибір потрібної таблиці.
2. Далі `WHERE` - відфільтровуються рядки, що відповідають умові.
3. Потім `SELECT` - відбираються зазначені стовпці та застосовуються функції.
4. Потім `ORDER BY` - проводиться сортування результуючої таблиці.
5. І наприкінці `LIMIT` — обмежується кількість записів, що виводяться.

Іншими словами, в результаті виконання запиту спочатку відбувається підготовка таблиці до роботи, а потім над нею виконуються різні операції.

::: {.callout-note}
Докладніше про оператор `WHERE` можна за [посиланням](https://duckdb.org/docs/sql/query_syntax/where).
:::

::: {#exr-sql-filter-01}
Напишіть SQL-запит до таблиці `products` та виведіть всю інформацію про товари, ціна яких не перевищує 100 одиниць. Результат відсортуйте за зростанням id товару.

Поля у результуючій таблиці: `product_id`, `name`, `price`

**Рішення:**
```{sql}
#| connection: con

SELECT 
    product_id,
    name,
    price
FROM   products
WHERE  price <= 100
ORDER BY product_id
```
:::

Фільтрувати дані в таблицях можна не тільки по полях з числовими значеннями, але і по полях зі значеннями, представленими у вигляді тексту:

```{.sql}
SELECT column_1, column_2
FROM table
WHERE column_2 = 'text'
```

У прикладі вище в результуючу таблицю потраплять лише рядки, значення в яких повністю збігаються із зазначеним у `WHERE` рядком `'text'`.

При порівнянні рядків також допускається використовувати нерівності:

```{.sql}
SELECT column_1, column_2
FROM table
WHERE column_2 > 'text'
```

Втім, така операція використовується рідше, оскільки не цілком очевидно, що означає «один рядок більше за інший».

Насправді порядок сортування даних рядкового типу зазвичай визначається заздалегідь встановленими правилами сортування, у яких значення мають довжина рядка в символах, порядок букв відповідно до алфавіту, наявність особливих символів, регістр тощо. Ми не будемо докладно зупинятись на цій темі — за бажання про це можна додатково прочитати у документації.

::: {.callout-note}
Докладніше про правила сортування даних рядкового типу можна за [посиланням](https://duckdb.org/docs/sql/expressions/collations).
:::

::: {#exr-sql-filter-02}
Виберіть користувачів жіночої статі з таблиці `users`. Виведіть лише id цих користувачів. Результат відсортуйте за зростанням id.

Додайте в запит оператор `LIMIT` і виведіть лише `1000` перших ID з відсортованого списку.

Поле у результуючій таблиці: `user_id`

**Рішення:**
```{sql}
#| connection: con

SELECT 
    user_id
FROM   
    users
WHERE  
    sex = 'female'
ORDER BY 
    user_id 
LIMIT 1000
```
:::
