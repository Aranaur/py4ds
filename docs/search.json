[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python в науці про дані",
    "section": "",
    "text": "Вступне слово\nКнига-конспект матеріалів з курсу “Python for Data Science”."
  },
  {
    "objectID": "03_control_constructs.html#присваєння",
    "href": "03_control_constructs.html#присваєння",
    "title": "3  Керуючі конструкції",
    "section": "3.1 Присваєння",
    "text": "3.1 Присваєння\nОператор присвоєння - це процес зв’язування імен та значень. Для цього використовується символ =.\n\nname = \"Frodo\"\nring = 1\ndic = {}"
  },
  {
    "objectID": "03_control_constructs.html#порядок-присвоєння",
    "href": "03_control_constructs.html#порядок-присвоєння",
    "title": "3  Керуючі конструкції",
    "section": "3.2 Порядок присвоєння",
    "text": "3.2 Порядок присвоєння"
  },
  {
    "objectID": "03_control_constructs.html#контроль-циклів",
    "href": "03_control_constructs.html#контроль-циклів",
    "title": "3  Керуючі конструкції",
    "section": "3.3 Контроль циклів",
    "text": "3.3 Контроль циклів\n\ni = 0\nwhile i < 15:\n    i += 1\n    if i == 7:\n        i = 7\n        continue\n    if i == 13:\n        break\n    print(i)\n\n1\n2\n3\n4\n5\n6\n8\n9\n10\n11\n12"
  },
  {
    "objectID": "04_quarto.html#що-таке-quarto",
    "href": "04_quarto.html#що-таке-quarto",
    "title": "4  Quarto",
    "section": "4.1 Що таке Quarto",
    "text": "4.1 Що таке Quarto\nQuarto - це науково-технічна видавнича система з відкритим кодом, яка ґрунтується на універсальному конверторі документів Pandoc та використовує мову розмітки Markdown. Це універсальний інструмент для тих, хто пише на R, Python, Julia та Observable JavaScript.\nЗа допомогою Quarto можна поєднувати описовий текст і код для створення відформатованих документів, веб-сторінок, постів у блогах, книг тощо.\n\n4.1.1 Назва Quarto\nРозробники Quarto хотіли використати ім’я, яке мало деяке значення в історії видавничої справи. Вибір пав на Quarto (від латинського quārtō, скорочено Qto, 4to або 4º) - це формат книги або брошури в одну четвертину топографічного листа. На кожній стороні листа при цьому поміщається 4 сторінки книги (8 сторінок на один лист).\nНайраннішим відомим виданням такого формату була Книга Сивіл (англ. Sibyllenbuch), що була надрукована Йоганном Гутенбергом у 1452-1453 роках.\n\n\n\nРисунок 4.1: Quarto\n\n\n\n\n4.1.2 Можливості Quarto\nQuarto являє собою текстовий документ спеціального формату .qmd, який можна скомпілювати у різноманітні документи:\n\nДокументи у форматах:\n\nHTML\nPDF\nePub\nMS Word\nOpenOffice\n\nПрезентації у форматах:\n\nreveal.js (HTML)\nPowerPoint (MS Office)\nBeamer (LaTeX/PDF)\n\nВеб-сторінки:\n\nPractical Deep Learning від fast.ai\nnbdev від fast.ai\nКурс Julia Workshop for Data Science\n\nКниги, приклади яких можна переглянути за посиланнями:\n\nPython for Data Analysis\nR for Data Science\nVisualization Curriculum\n\nІнтерактивні документи:\n\nObservable reactive JavaScript\nShiny вебфреймворк\nІнтерактивні віджети Jupyter"
  },
  {
    "objectID": "04_quarto.html#початок-роботи-з-quarto",
    "href": "04_quarto.html#початок-роботи-з-quarto",
    "title": "4  Quarto",
    "section": "4.2 Початок роботи з Quarto",
    "text": "4.2 Початок роботи з Quarto\n\n4.2.1 Встановлення Quarto\nДля роботи з Quarto потрібно: 1. Встановити інтерфейс командного рядка Quarto (CLI) під актуальну операційну систему (Windows, Linux або Mac OS).\n\nВстановити плагін для інтегрованого середовища розробки (IDE). На даний момент підтримуються:\n\nVS Code\nRStudio\nJupyter\n\n\n\n\n4.2.2 Робота з проектами\nСтворити Quarto-проект можна декількома шляхами:\n\nЗа допомогою командного рядка:\n\n\n\nterminal\n\n# веб-сайт\nquarto create-project mysite --type website\n\n# блог\nquarto create-project myblog --type website:blog\n\n# книга\nquarto create-project mybook --type book\n\n\nЗасобами IDE:\n\n\nVS Code: File -> New File -> …\n\n\n\n\nРисунок 4.2: Меню створення Quarto-проекту у VS Code\n\n\n\nRStudio: File -> New Project… -> New Directory\n\n\n\n\nРисунок 4.3: Меню створення Quarto-проекту у RStudio\n\n\n\n\n4.2.3 Як працює Quarto\nСпочатку Knitr (для R) або Jupyter (для Python або Julia) виконує всі фрагменти коду .qmd-файлу і створює новий markdown (.md) документ, який включає в себе код і всі його результати. Далі .md-файл оброблюється Pandoc для перетворення у різноманітні формати файлів (HTML, PDF, Word тощо).\n\n\n\nРисунок 4.4: Процедура рендерінгу документів в Quarto\n\n\n\n\n4.2.4 Рендерінг\n\nДля рендерінгу документу можна використати кнопку Render в VS Code.\n\n\n\n\nРисунок 4.5: Клавіша рендерінгу документу в VS Code\n\n\n\nРендерінг за допомогою командного рядку:\n\n\n\nterminal\n\nquarto render <input> --to <format>\n\n# Наприклад:\nquarto render document.qmd --to docx"
  },
  {
    "objectID": "04_quarto.html#структура-документів-quatro",
    "href": "04_quarto.html#структура-документів-quatro",
    "title": "4  Quarto",
    "section": "4.3 Структура документів Quatro",
    "text": "4.3 Структура документів Quatro\nQuatro документи складаються з трьох базових складових:\n\nYAML-шапки1\nТексту з використанням розмітки Markdown\nЧанків (анг. chunks) з кодом\n\n\n4.3.1 YAML-шапка\nYAML-шапка знаходиться нагорі документу і відділена трьома дефісами (---) зверху та знизу. В ній зберігається мета-інформація документу: назва, дата створення, автор, інформація щодо роботи коду, контенту і процесу рендерінгу.\n---\ntitle: \"Dracula\"\nauthor: \"Bram Stoker\"\ndate: \"May 26, 1897\"\nformat: \n  html:\n    toc: true\n    code-fold: true\n---\n\n\n4.3.2 Тексту з використанням розмітки Markdown\nЦя частина документу йде одразу після YAML-шапки і складає основну частину документу.\nMarkdown - це популярна і зручна мова розмітки. Ви непевно зустрічали її в README.md-файлах репозиторіїв GitHub, а також у Telegram-повідомленнях.\n\n\n4.3.3 Чанки з кодом\nЧанки - це блоки, які відділяються від тексту потрійними зворотніми лапками (` анг. backtick) на початку та в кінці. У фігурних дужках вказується мова програмування на якій необхідно виконати код.\n```{python}\nprint('Fly, you fools!')\n```\nРезультат чанку за замовчування виводиться одразу після нього, але все це можна налаштувати."
  },
  {
    "objectID": "04_quarto.html#основи-markdown",
    "href": "04_quarto.html#основи-markdown",
    "title": "4  Quarto",
    "section": "4.4 Основи Markdown",
    "text": "4.4 Основи Markdown\nQuarto ґрунтується на Pandoc та використовує різновид markdown в якості базового синтаксису. Pandoc markdown - це розширена та злегка перероблена версія синтаксису markdown.\nMarkdown — це формат звичайного тексту, який розроблено таким чином, щоб його було легко писати та, що ще важливіше, легко читати.\n\n4.4.1 Форматування тексту\n\n\n\n\n\n\n\nСинтаксис markdown\nРезультат\n\n\n\n\n*курсив* та **жирний**\nкурсив та жирний\n\n\nнадрядковий^2^ / підрядковий~2~\nнадрядковий2 / підрядковий2\n\n\n~~перекреслення~~\nперекреслення\n\n\n`дослівний код`\nдослівний код\n\n\n\n\n\n4.4.2 Заголовки\n\n\n\n\n\n\n\nСинтаксис markdown\nРезультат\n\n\n\n\n# Заголовок 1\nHeader 1\n\n\n## Заголовок 2\nHeader 2\n\n\n### Заголовок 3\nHeader 3\n\n\n#### Заголовок 4\nHeader 4\n\n\n##### Заголовок 5\nHeader 5\n\n\n###### Заголовок 6\nHeader 6\n\n\n\n\n\n4.4.3 Посилання та рисунки\n\n\n\nСинтаксис markdown\nРезультат\n\n\n\n\n[Python](https://python.org)\nPython\n\n\n![Підпис](img/python-logo.jpg)\n\n\n\n[![Caption](img/python-logo.jpg)](https://www.python.org)\n\n\n\n[![Caption](img/python-logo.jpg)](https://www.python.org \"Python\")\n\n\n\n[![](img/python-logo.jpg){fig-alt=\"Alt text\"}](https://www.python.org)\n\n\n\n\n\n\n4.4.4 Списки\n\n\n\n\n\n\n\nСинтаксис markdown\nРезультат\n\n\n\n\n* невпорядкований список\n    + підпункт 1\n    + підпункт 2\n        - під-підпункт 1\n\nневпорядкований список\n\nпідпункт 1\nпідпункт 2\n\nпід-підпункт 1\n\n\n\n\n\n*   пункт 2\n\n    Продовження (відступ 4 інтервали)\n\nпункт 2\nПродовження (відступ 4 інтервали)\n\n\n\n1. впорядкований список\n2. пункт 2\n    i) підпункт 1\n         A.  під-підпункт 1\n\nвпорядкований список\nпункт 2\n\nпідпункт 1\n\nпід-підпункт 1\n\n\n\n\n\n(@)  Список, нумерація якого\n\nпродовжується після\n\n(@)  переривання\n\nСписок, нумерація якого\n\nпродовжується після\n\nпереривання\n\n\n\nтермін\n: визначення\n\nтермін\n\nвизначення\n\n\n\n\n\n\n\n4.4.5 Таблиці\n\n4.4.5.1 Таблиці markdown\n\nСинтаксис markdown\n| Зліва | Справа | За замовчуванням | По центру |\n|------:|:-------|------------------|:---------:|\n|   12  |  12    |    12            |    12     |\n|  123  |  123   |   123            |   123     |\n|    1  |    1   |     1            |     1     |\n\n\nРезультат\n\n\n\nЗліва\nСправа\nЗа замовчуванням\nПо центру\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1\n\n\n\nФормувати такі таблиці вручну досить складно і незручно. В таких випадках на допомогу приходить Markdown Tables Generator.\n\n\n\n4.4.5.2 Таблиці з Python\nДля виводу таблиць за допомогою Python необхідно завантажити пакет tabulate:\n\n\nterminal\n\npip install tabulate\n\n\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\ntable = [[\"Bilbo Baggins\", \"Hobbits\", \"Male\"],\n         [\"Beren\", \"Men\", \"Male\"],\n         [\"Nimrodel\", \"Elves\", \"Female\"],\n         [\"Muzgash\", \"Orc\", \"Male\"]]\nMarkdown(tabulate(\n  table, \n  headers=[\"Name\", \"Race\", \"Sex\"]\n))\n\n\n\nТаблиця 4.1: Персонажі Середзем’я\n\n\nName\nRace\nSex\n\n\n\n\nBilbo Baggins\nHobbits\nMale\n\n\nBeren\nMen\nMale\n\n\nNimrodel\nElves\nFemale\n\n\nMuzgash\nOrc\nMale\n\n\n\n\n\n\nТакож можна виводити Pandas DataFrame:\n\nimport pandas as pd\ndf = pd.DataFrame(data = [[1, 2],[2, 3],[3, 3]], columns = ['v1', 'v2'])\nprint(df)\n\n   v1  v2\n0   1   2\n1   2   3\n2   3   3"
  }
]