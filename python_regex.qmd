# Регулярні вирази

**Регулярні вирази** (англ. *regular expressions*, *regexes*) - це патерни, які використовуються для знаходження певних комбінацій символів у тексті. Наприклад, якщо користувач вводить адресу електронної пошти у вашій програмі, на веб-сайті або в додатку на телефоні, в ідеалі ви хочете мати можливість перевірити, що він дійсно ввів адресу електронної пошти, а не щось інше. Використовуючи регулярні вирази, ми можемо перевірити, чи відповідає введений текст певному формату. Це дуже корисно, оскільки ви можете використовувати регулярні вирази для перевірки введення користувача, або для пошуку певних комбінацій символів у тексті.

Вони дуже потужні, але в той же час достатньо складні. Якщо ви вперше з ними зіткнулися, то вони здаються дуже незрозумілими. Але якщо ви вже з ними працювали, то ви не зможете без них.

Для початку розглянемо декілька задач і спробуємо їх вирішити використовуючи більш простий синтаксис, і подивитися, з якими обмеженнями ми зіткнемося.

Створимо файл `validate.py` метою якого є перевірка адреси електронної пошти користувача.

```{.bash filename="Terminal"}
code validate.py
```

Напишемо просту програму, яка буде приймати від користувача адресу електронної пошти і перевіряти, чи вона відповідає певному формату. Одразу використаємо метод `strip()` для видалення зайвих пробілів з початку і кінця рядка. Але як перевірити, що введене значення дійсно є валідним для електронної пошти? Перша ідея, яка з'являється - це перевірити, чи введений текст містить символ `@`. Якщо так, то ми можемо припустити, що це адреса електронної пошти. Давайте спробуємо це зробити:

```{python}
#| label: validate-eval-at
#| eval: false

email = input("Введіть email: ").strip()

if "@" in email:
    print("Валідна адреса електронної пошти")
else:
    print("Невалідна адреса електронної пошти")
```

```{.bash filename="Terminal"}
python validate.py
Введіть email: ihor.miroshnychenko@kneu.ua
Валідна адреса електронної пошти
```

Зрозуміло, що така програма не є ідеальною, оскільки ми можемо ввести тільки один або декілька символів `@` і програма буде пропускати такі випадки.

Наступна ідея - це додати додаткову перевірку, що введений текст містить символ `.`. Якщо так, то ми можемо припустити, що це адреса електронної пошти. Давайте спробуємо це зробити:

```{python}
#| label: validate-eval-dot
#| eval: false

email = input("Введіть email: ").strip()

if "@" in email and "." in email:
    print("Валідна адреса електронної пошти")
else:
    print("Невалідна адреса електронної пошти")
```

```{.bash filename="Terminal"}
python validate.py
Введіть email: @.
Валідна адреса електронної пошти
```

Програма все ще не ідеальна. Давайте припустимо, що крапка може бути тільки після символа `@`. Для цього ми можемо поділити введений рядок на дві частини, використовуючи метод `split()` і перевірити, що друга частина містить крапку. Давайте спробуємо це зробити:

```{python}
#| label: validate-eval-split
#| eval: false

email = input("Введіть email: ").strip()

username, domain = email.split("@")

if username and "." in domain:
    print("Валідна адреса електронної пошти")
else:
    print("Невалідна адреса електронної пошти")
```

```{.bash filename="Terminal"}
python validate.py
Введіть email: miroshnychenko@kneu
Невалідна адреса електронної пошти
```

Тепер давайте звузимо сферу застосування цієї програми і будемо шукати валідні адреси українських навчальних закладів, які мають домен `.edu.ua`. Для цього ми можемо використати метод `endswith()`:

```{python}
#| label: validate-eval-endswith
#| eval: false

email = input("Введіть email: ").strip()

username, domain = email.split("@")

if username and domain.endswith(".edu.ua"):
    print("Валідна адреса електронної пошти")
else:
    print("Невалідна адреса електронної пошти")
```

```{.bash filename="Terminal"}
python validate.py
Введіть email: miroshnychenko.ihor@kneu.edu.ua
Валідна адреса електронної пошти

python validate.py
Введіть email: miroshnychenko.ihor@.edu.ua
Валідна адреса електронної пошти
```

Ми можемо продовжувати роботу над цією програмою. В кінцевому підсумку нам доведеться писати багато коду, просто щоб валідувати адресу електронної пошти.

## Бібліотека `re`

В Python є бібліотека для регулярних виразів, яка лаконічно називається `re`. В ній є багато можливостей для визначення, перевірки і заміни шаблонів.

::: {.callout-note}
Документація до бібліотеки `re` доступна за посиланням <https://docs.python.org/3/library/re.html>.
:::

Почнемо з однієї з найбільш універсальних функцій пошуку:

`re.search(pattern, string, flags=0)`:

-  `pattern` - регулярний вираз, який ми шукаємо
-  `string` - рядок, в якому ми шукаємо
-  `flags` - додаткові флаги, які визначають поведінку функції

Ця функція повертає об'єкт, який містить інформацію про знайдений шаблон. Якщо шаблон не знайдено, то функція повертає `None`.

Давайте спробуємо переписати нашу програму використовуючи функцію `re.search()`:

```{python}
#| label: validate-re-search
#| eval: false

import re

email = input("Введіть email: ").strip()

if re.search("@", email):
    print("Валідна адреса електронної пошти")
else:
    print("Невалідна адреса електронної пошти")
```

```{.bash filename="Terminal"}
python validate.py
Введіть email: miroshnychenko.ihor@kneu.edu.ua
Валідна адреса електронної пошти

python validate.py
Введіть email: @
Валідна адреса електронної пошти
```

Цей варіант програми працює так само, як і наш перший варіант, але вже з використанням пакету `re`.
