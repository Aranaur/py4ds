# Умовні конструкції

## Вкладені оператори `if`
Ми можемо використовувати `if` всередині `if`. Зверніть увагу, що в такому разі ми додаємо ще один рівень відступів.

```{python}
# Приклад 1: Перевірка, що число є додатним і парним:
number = 8
if number > 0:
    if number % 2 == 0:
        print("The number is positive and even")
```

```{python}
# Приклад 2: Перевірка довжини рядка та його першого символу:
string = "Hello, world!"
if len(string) > 0:
    if string[0] == "H":
        print("The string starts with 'H'")
```

В обох прикладах ми могли б скористатися одним `if` і помістити в нього обидві умови через `and`. Наприклад, ось так:

```{python}
if number > 0 and number % 2 == 0:
    print("The number is positive and even")
```

Але іноді нам зручніше не об'єднувати умови, а робити вкладені `if`. Це допомагає нам одразу припинити виконання програми, якщо перша умова не була виконана, і не витрачати час на перевірку інших вкладених умов.

## Як працює `if`

Ви вже знаєте, що після `if` очікується вираз, який повертає `True` або `False`. Aле на практиці все трохи складніше. Давайте розглянемо такий приклад: ми будемо перевіряти довжину списку, якщо він не порожній, друкувати елементи списку:

```{python}
available_products = ['чай', 'кава', 'сік']

if len(available_products) > 0:
    print(available_products)
```

Такий код виведе нам список на друк, оскільки `len(available_products) > 0` дійсно поверне нам `True`. Ми могли б записати ту саму перевірку таким чином:

```{python}
available_products = ['чай', 'кава', 'сік']

if available_products:
    print(available_products)
```

І такий код теж виведе нам список на друк, хоча після `if` знаходиться не `True` або `False`, а просто наш список! Вся справа в тому, що непорожній список інтерпретується як `TRUE`. Пам'ятаєте, ми вже говорили про приведення типів? Таким чином, якщо після `if` написано щось, що не є `True` або `False`, програма спробує перевести це в логічний тип і результат приведення використати для виконання умови.

Розглянемо ще кілька прикладів, виконайте ці умови, щоб побачити, де ми отримаємо `True`, а де `False`:

```{python}
n = 0
if n:
   print('Умова виконана')
```

```{python}
n = 10
if n:
   print('Умова виконана')
```

```{python}
n = -5
if n:
   print('Умова виконана')
```

```{python}
s = 'Oksana'
if s:
   print('Умова виконана')
```

```{python}
s = ''
if s:
   print('Умова виконана')
```

```{python}
d = {}
if d:
   print('Умова виконана')
```

Таким чином, **нуль**, **порожній рядок**, **порожній масив** інтерпретуються як `False`. І якщо ми хочемо вивести на друк список, але тільки за умови, що він не порожній, ми дійсно можемо написати умову таким чином - `if available_products:`.

Для досвідченого програміста це буде досить природний запис. Але на старті ми рекомендуємо прописувати умови максимально явно, чим зрозуміліше, що саме ми перевіряємо, тим простіше читати код як вам самим, так і вашим колегам - `if len(available_products) > 0:`.

Так відразу зрозуміло, що `available_products` - це якийсь масив, ми перевіряємо, що він не порожній. У першому ж варіанті доведеться уточнити тип змінної `available_products`, щоб зрозуміти логіку коду.

## Конструкція `if-else`

У Python `if-else` використовується для виконання різних блоків коду залежно від умови. Якщо умова істинна, виконується блок коду, наступний за оператором `if`. В іншому випадку, якщо умова хибна, виконується блок коду, наступний за оператором `else`.

Ось приклад:

```{python}
x = 5
if x > 10:
    print("x більше 10")
else:
    print("x менше або дорівнює 10")
```

У цьому прикладі змінна `x` порівнюється зі значенням 10. Якщо `x` більше 10, виводиться повідомлення **"x більше 10"**. Якщо `x` менше або дорівнює 10, виводиться повідомлення **"x менше або дорівнює 10"**.

Іноді може виникнути необхідність перевірити кілька умов, використовуючи додаткові оператори умов, такі як `and` і `or`:

```{python}
x = 5
y = 12
if x > 10 and y > 10:
    print("x і y більше 10")
elif x > 10 or y > 10:
    print("x або y більше 10")
else:
    print("x і y менше або дорівнюють 10")
```

У цьому прикладі перевіряється, чи є `x` і `y` більшими за 10. Якщо обидві умови істинні, виводиться повідомлення `"x і y більше 10"`. Якщо хоча б одна з умов істинна, виводиться повідомлення `"x або y більше 10"`. Якщо обидві умови хибні, виводиться повідомлення `"x і y менше або дорівнюють 10"`.

Якщо потрібно перевірити, що змінна перебуває в діапазоні значень, можна використовувати ланцюжок операторів порівняння:

```{python}
num = 5
if 0 <= num <= 10:
    print("Число знаходиться в діапазоні від 0 до 10")
else:
    print("Число знаходиться поза діапазоном від 0 до 10")
```

## Тернарний оператор
Тернарний оператор у Python - це спрощена форма умовного виразу "if-else". Він дозволяє нам записати просту умову в одному рядку коду. Синтаксис тернарного оператора виглядає наступним чином:

```{{python}}
значення_1 if умова else значення_2
```

Якщо умова істинна, змінній буде присвоєно значення 1, інакше - значення 2. Ось приклади використання тернарного оператора:

```{python}
x = 10
result = "x більше 5" if x > 5 else "x менше або дорівнює 5"
print(result)
```

У цьому прикладі змінна `x` порівнюється зі значенням 5. Якщо `x` більше за 5, змінній `result` буде присвоєно значення `"x більше за 5"`, в іншому випадку - `"x менше або дорівнює 5"`. Потім значення змінної `result` виводиться на екран за допомогою функції `print()`. Тернарний оператор також може бути використаний всередині інших виразів:

```{python}
x = 4
result = "парне" if x % 2 == 0 else "непарне"
print(f"x - {result}")
```

У цьому прикладі ми перевіряємо, чи є значення змінної `x` парним. Якщо `x` ділиться без залишку на 2, змінній `result` буде присвоєно значення `"парне"`, в протилежному випадку - `"непарне"`. Потім ми виводимо на екран повідомлення у форматованому рядку. Тернарний оператор особливо корисний, коли потрібно присвоїти змінній значення залежно від деякої умови в одному рядку коду. Він дає змогу зробити код компактнішим і зрозумілішим.

## Задачі для розв'язання

::::: {.callout-note icon=false}
## 
:::: {#exr-py-if-01}
<br>
У змінних `a` та `b` задано значення довжини та ширини прямокутника відповідно. Перевірте, чи є цей прямокутник квадратом.

Збережіть у змінну `result` значення `True`, якщо це квадрат, інакше `False`. 

**Приклад:**

```{{python}}
# Приклад 1
a = 121 
b = 100 
result = False

# Приклад 2
a = 10 
b = 10 
result = True
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

a = 121
b = 100
result = a == b

# або
result = True if a == b else False
```

::::
:::::

::::: {.callout-note icon=false}
## 
:::: {#exr-py-if-02}
<br>
У змінних `a` і `b` задано два числа. Квадрат якого числа більший? Збережіть це число в `result`.  

**Приклад:**

```{{python}}
# Приклад 1
a = 1 
b = 2 
result = 2

# Приклад 2
a = 2 
b = -3 
result = -3
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

a = 1
b = 2
result = a if a ** 2 > b ** 2 else b
```

::::
:::::

::::: {.callout-note icon=false}
## 
:::: {#exr-py-if-03}
<br>
Катя і Діма вирішили купити квартиру в Києві. Сімейний бюджет обмежений, тому їм підходять такі варіанти:

1. Вартість не більше 1.5 млн, площа не менше 50 квадратних метрів, віддаленість від метро не більше 25 хвилин пішки.
2. Вартість не більше 1.3 млн, площа не менше 35 квадратних метрів, віддаленість від метро не більше 5 хвилин пішки.

Напишіть програму, яка отримує на вхід вартість квартири `p`, площу `s` і віддаленість від метро `d`, і зберігає у змінну `result` повідомлення про те, підходить квартира чи ні у форматі `True` або `False`.

**Приклад:**

```{{python}}
#Приклад 1
p = 1295000 #вартість
s = 32 #площа
d = 13 #віддаленість від метро

result = False

#Приклад 2
p = 1498000 #вартість
s = 51.9 #площа
d = 23 #віддаленість від метро

result = True
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

p = 1295000
s = 32
d = 13

result = (p <= 1500000 and s >= 50 and d <= 25) or (p <= 1300000 and s >= 35 and d <= 5)

# або

if p <= 1500000 and s >= 50 and d <= 25:
    result = True
elif p <= 1300000 and s >= 35 and d <= 5:
    result = True
else: 
    result = False
```

::::
:::::

::::: {.callout-note icon=false}
## 
:::: {#exr-py-if-03}
<br>
Катя завершила навчання на курсі Machine Learning і набрала `K` балів за розв'язання задач. Щоб отримати сертифікат про проходження курсу, необхідно набрати щонайменше `M` балів. Якщо Катя набрала від `L` балів, то отримає сертифікат з відзнакою. 

Змінні `K`, `M` і `L` уже визначені. 

Напишіть програму, яка збереже у змінну `result` інформацію про результати проходження курсу в такому форматі:
- `"Недостатньо балів"`, якщо Каті не вистачило балів для отримання сертифіката,
- `"Сертифікат видано"`, якщо Катя набрала кількість балів, необхідну для отримання сертифіката,
- `"Видано сертифікат з відзнакою"`, якщо Катя набрала `≥ L` балів.

**Приклад:**

```{{python}}
# Приклад 1
K = 121 #кількість балів, отриманих Катею
M = 100 #кількість балів, необхідна для отримання сертифіката
L = 150 #кількість балів, необхідна для отримання сертифіката з відзнакою

result = "Сертифікат видано"

# Приклад 2
K = 148 
M = 110 
L = 145 

result = "Видано сертифікат з відзнакою"
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

K = 121
M = 100
L = 150

if K < M:
    result = "Недостатньо балів"
elif K >= L:
    result = "Видано сертифікат з відзнакою"
else:
    result = "Сертифікат видано"
```

::::
:::::

::::: {.callout-note icon=false}
## 
:::: {#exr-py-if-04}
<br>
Компанія вирішила виплатити співробітникам премію в розмірі:

- 2 оклади, якщо його стаж роботи ≥ 2 роки
- 5 окладів, якщо стаж роботи ≥ 5 років
- 10 окладів, якщо стаж роботи ≥ 15 років

У змінній `x` - зарплата співробітника, у змінній `y` - стаж. Обчисліть розмір премії, результат збережіть у змінну `result`. 

**Приклад:**

```{{python}}
# Приклад 1
x = 150000
y = 3
result = 300000

# Приклад 2
x = 100000
y = 1
result = 0

# Приклад 3
x = 200000
y = 16
result = 2000000
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

x = 150000
y = 3

if y >= 15:
    result = 10 * x
elif y >= 5:
    result = 5 * x
elif y >= 2:
    result = 2 * x
else:
    result = 0
```

::::
:::::

::::: {.callout-note icon=false}
## 
:::: {#exr-py-if-05}
<br>
Дано словник `dict_age`, у якому зберігається інформація про вік трьох братів у форматі:

- ключ - це ім'я
- значення - це вік, число цілих років.

Якщо вік у братів різний і виходить однозначно визначити середнього брата, збережіть ім'я середнього брата у змінну `result`.

Якщо хоча б у двох братів вік однаковий, то збережіть у змінну `result` порожній рядок.

**Приклад:**

```{{python}}
dict_age = {'Антон': 5, 
            'Денис': 14, 
            'Борис': 9}
result = 'Борис'

dict_age = {'Марк': 5, 
            'Авель': 5, 
            'Карп': 9}
result = ''
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

dict_age = {'Антон': 5, 
            'Денис': 14, 
            'Борис': 9}

ages = list(dict_age.values())
if len(set(ages)) == 3:
    middle_index = ages.index(sorted(ages)[1])
    result = list(dict_age.keys())[middle_index]    
else:
    result = ''
```

::::
:::::

::::: {.callout-note icon=false}
## 
:::: {#exr-py-if-06}
<br>
Напишіть програму, яка прийматиме довжини сторін трикутника `a`, `b` і `c`, визначатиме, чи є він прямокутним, і зберігатиме результат перевірки в `result` у форматі `True` або `False`. 

- Прямокутний трикутник - це трикутник, у якому один кут прямий (тобто 90 градусів).
- Найдовша сторона (гіпотенуза) не обов'язково буде останнім аргументом.
- Усі аргументи будуть цілими числами.

**Приклад:**

```{{python}}
a = 3
b = 5
c = 4
result = True

a = 70
b = 130
c = 110
result = False
```

::: {.callout-tip collapse="true"}
## Підказка

Пам'ятаєте теорему Піфагора? Квадрат гіпотенузи дорівнює сумі квадратів катетів (двох інших сторін)
:::

```{python}
#| code-fold: true
#| code-summary: "Рішення"

a = 3
b = 5
c = 4

if a > b and a > c:
    if a ** 2 == b ** 2 + c ** 2:
        result = True
    else:
        result = False
elif b > a and b > c:
    if b ** 2 == a ** 2 + c ** 2:
        result = True
    else:
        result = False
else:
    if c ** 2 == a ** 2 + b ** 2:
        result = True
    else:
        result = False

# або

values_list = sorted([a, b, c])
if values_list[-1]**2 == values_list[0]**2 + values_list[1]**2:
    result = True
else:
    result = False
```

::::
:::::

::::: {.callout-note icon=false}
## 
:::: {#exr-py-if-06}
<br>
Напишіть програму, яка буде вираховувати або довжину кола, або периметр квадрата, виходячи з переданих аргументів.

На вхід подаються буква у змінній `f` і число у змінній `v`.

Буква визначатиме геометричну фігуру:

`'S'` - квадрат
`'С'` - коло

Якщо буквою задано квадрат, то другий аргумент, число `v`, вважається довжиною сторони квадрата. В іншому випадку число вважається радіусом кола.

Результат збережіть у `result`

Число `pi` візьміть рівним `3.14`.

::: {.callout-tip collapse="true"}
## Підказка

Пам'ятаєте теорему Піфагора? Квадрат гіпотенузи дорівнює сумі квадратів катетів (двох інших сторін)
:::

```{python}
#| code-fold: true
#| code-summary: "Рішення"

f = 'S'
v = 5

if f == 'S':
    result = v * 4
else:
    result = 2 * 3.14 * v
```

::::
:::::