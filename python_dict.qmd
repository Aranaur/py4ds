# Словники

Словник у Python - це структура даних, яка зберігає об'єкти у вигляді ключів і значень. Ключі можуть бути будь-якого незмінного типу даних - числа, рядки, кортежі, а значення можуть бути будь-якого типу даних - числа, рядки, списки, словники тощо. Словник у Python є дуже ефективним способом зберігання даних, тому що він дає змогу швидко знаходити значення за ключем. Розглянемо невеликий приклад:

```{python}
# створюємо словник, який зберігає інформацію про студентів
students = {
    'Василь': { 'вік': 23, 'курс': 3},
    'Марія': {'вік': 20, 'курс': 2},
    'Петро': {'вік': 22, 'курс': 2},
    'Ольга': {'вік': 21, 'курс': 3}
}
# виводимо інформацію про студента з ім'ям "Василь"
print(students['Василь'])
# виводимо вік студента "Марія"
print(students['Марія']['вік'])
```

## Створення словника

У Python є кілька способів створення словників. Ось деякі з них:

1. **Літерали словника**

Літерали словника являють собою список ключів і значень, укладених у фігурні дужки. Ключ і значення розділяються двокрапкою, а пари ключ-значення розділяються комою. Наприклад:

```{python}
my_dict = {'ім\'я': 'Аліса', 'вік': 25, 'місто': 'Київ'}
print(my_dict)
```

2. **Вбудована функція `dict()`**

Функцію `dict()` можна використовувати для створення словників з інших послідовностей або для створення порожнього словника. Наприклад:

```{python}
empty_dict = dict()
print(empty_dict)
```

```{python}
fruit_dict = dict([('яблуко', 5), ('банан', 3), ('апельсин', 2)])
print(fruit_dict)
```

3. **Генератор словників**

Генератори словників дозволяють створювати словники на основі інших послідовностей. Наприклад:

```{python}
fruit_list = ['яблуко', 'банан', 'апельсин']
fruit_dict = {fruit: len(fruit) for fruit in fruit_list}
print(fruit_dict)
```

4. **Метод `fromkeys()`**

Метод `fromkeys()` дає змогу створити словник із зазначеними ключами й одним і тим самим значенням для всіх ключів. Наприклад:

```{python}
fruit_list = ['яблуко', 'банан', 'апельсин']
fruit_dict = {}.fromkeys(fruit_list, 0)
print(fruit_dict)
```

Пам'ятаєте, ми з вами говорили про `frozenset` ([див. @sec-frozenset])? Одна з його корисних особливостей - `frozenset` можна використовувати як ключ словника. Припустимо, ми хочемо як ключ, зберігати одразу кілька значень - ім'я користувача і його вік.

```{python}
students_courses = {}
name_age = frozenset(['Anatoly', 32])
students_courses.update({name_age: ['Python', 'C++']})
print(students_courses)
```

Це один із прикладів практичного застосування `frozenset`, якщо ми хочемо створити словник, де сам ключ - це масив із кількох елементів, то `frozenset` зможе нам допомогти. Список або звичайний `set` використовувати як ключ для словника не вийде.

Це лише деякі зі способів створення словників у Python. Кожен із них має свої особливості та може використовуватися залежно від конкретного завдання.

## Основні методи словників

1. **`get()`** - дає змогу отримати значення за ключем, але на відміну від звернення через `[]`, не викликає виняток `KeyError`, якщо ключ відсутній у словнику. Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
print(my_dict.get("two"))
print(my_dict.get("four", "Key not found"))
```

2. **`keys()`** - дає змогу отримати список ключів словника. Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
print(my_dict.keys())
```

3. **`values()`** - дає змогу отримати список значень словника. Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
print(my_dict.values())
```

4. **`items()`** - дає змогу отримати список пар ключ-значення словника. Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
print(my_dict.items())
```

5. **`pop()`** - дає змогу видалити пару ключ-значення за ключем. Якщо ключ відсутній, викликає виняток `KeyError` або повертає другий аргумент, якщо він переданий. Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
print(my_dict.pop("two"))
print(my_dict.pop("four", "Key not found"))
```

6. **`clear()`** - дає змогу видалити всі пари ключ-значення зі словника. Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
my_dict.clear()
print(my_dict)
```

7. **`update()`** - дає змогу оновити словник із іншого словника або із послідовності пар ключ-значення. Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
new_dict = {"two": 22, "four": 4}
my_dict.update(new_dict)
print(my_dict)
```

8. **`copy()`** - дає змогу створити копію словника. Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
new_dict = my_dict.copy()
print(new_dict)
```

9. **`setdefault()`** - повертає значення за ключем. Якщо ключ відсутній, то він буде вставлений у словник із зазначеним значенням (або `None`, якщо значення не вказано). Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
print(my_dict.setdefault("two", 22))
print(my_dict.setdefault("four"))
print(my_dict)
```

##  для самостійної роботи

:::: {.callout-note icon=false}
## 
::: {#exr-py-dict-01}
<br>
У змінну `cities_population` збережіть словник із трьома ключами: `'Київ'`, `'Париж'`, `'Токіо'`. Як значення збережіть населення цих міст у млн. осіб: `2.88`, `2.16`, `13.96`. Ключами нашого словника будуть рядки, значеннями - числа у форматі `float`.

```{python}
#| code-fold: true
#| code-summary: "Рішення"

cities_population = {
    'Київ': 2.88,
    'Париж': 2.16,
    'Токіо': 13.96
}
```

:::
::::

::::: {.callout-note icon=false}
## 
:::: {#exr-py-dict-02}
<br>
Дано словник `dict_input`. Поміняйте ключі та значення місцями. Результат збережіть у `result`.

**Приклад:**

```{{python}}
dict_input = {"1": 11, "2": 22, "3": 33}
result = {11: "1", 22:"2", 33:"3"}
```

::: {.callout-tip collapse="true"}
## Підказка

Варіантів рішення може бути декілька. Згадайте про методи словників, які ви вивчили у цьому уроці. Також згадайте про функцію `zip()`, яка дозволяє об'єднати дві послідовності у послідовність пар [див. @sec-list-zip]. Або використайте генератор словників.
:::

```{python}
#| code-fold: true
#| code-summary: "Рішення"

dict_input = {"1": 11, "2": 22, "3": 33}
result = dict(zip(dict_input.values(), dict_input.keys()))
result = {value: key for key, value in dict_input.items()}
```

::::
:::::

::::: {.callout-note icon=false}
## 
:::: {#exr-py-dict-02}
<br>
Катя - власник невеликого кондитерського виробництва, на якому виготовляють еклери. 
У нас є словник `data`, у якому міститься інформація про собівартість одиниці товару `cost_price`, ціну продажу `sell_price` та кількість товару `eclairs`. 
Потрібно порахувати, який прибуток Катя отримує після продажу своєї продукції. Результат збережіть у змінну `result`, округливши суму до цілого числа.

**Приклад:**

```{{python}}
data = {
  "cost_price": 225.89,
  "sell_price": 550.00,
  "eclairs": 100
}
result = 32411
```

::: {.callout-tip collapse="true"}
## Підказка

Прибуток = продажна ціна - собівартість
:::

```{python}
#| code-fold: true
#| code-summary: "Рішення"

data = {
  "cost_price": 225.89,
  "sell_price": 550.00,
  "eclairs": 100
}

result = round((data["sell_price"] - data["cost_price"]) * data["eclairs"])
```

::::
:::::

::::: {.callout-note icon=false}
## 
:::: {#exr-py-dict-03}
<br>
Є словник `student`, у якому зберігаються ім'я студента і список його оцінок. У `result` збережіть словник з ім'ям студента та найвищою його оцінкою. 

**Приклад:**

```{{python}}
student = {"name": "Ihor", "notes": [4, 5, 4]}
result = {"name": "Ihor", "max_note": 5}
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

student = {"name": "Ihor", "notes": [4, 5, 4]}
result = {"name": student["name"], "max_note": max(student["notes"])}
```

::::
:::::

::::: {.callout-note icon=false}
## 
:::: {#exr-py-dict-04}
<br>
Антон навчається на Data Scientist. У словнику `anton_courses` зберігається інформація про завершені ним курси та кількість набраних балів. Дані в словнику зберігаються у форматі **ключ - назва курсу, значення - кількість балів** у числовому форматі. 
Антон завершив навчання на курсі **Machine Learning** і набрав **120 балів**. Додайте до словника `anton_courses` цю інформацію. 
У змінну `courses` збережіть список пройдених курсів. 
У змінну `DataAnalyst` збережіть кількість балів, набрану Антоном на однойменному курсі, ця інформація є в словнику. 

**Приклад:**

```{{python}}
anton_courses = {'Python for Data Science': 56, 
                 'Statistics': 87, 
                 'Data Analyst': 140}
# -> 
anton_courses = {'Python for Data Science': 56, 
                 'Statistics': 87, 
                 'Data Analyst': 140, 
                 'Machine Learning': 120}
courses = ['Python for Data Science', 'Statistics', 'Data Analyst', 'Machine Learning']
DataAnalyst = 87
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

anton_courses = {'Python for Data Science': 56, 
                 'Statistics': 87, 
                 'Data Analyst': 140}

anton_courses['Machine Learning'] = 120
courses = list(anton_courses.keys())
DataAnalyst = anton_courses['Data Analyst']
```

::::
:::::

::::: {.callout-note icon=false}
## 
:::: {#exr-py-dict-05}
<br>
У нас є магазин одягу LARA. У словнику `shop_stock` зберігається інформація про товари, наявні на складі магазину. Інформація вказана у форматі ключ - артикул товару, значення - кількість одиниць. 
У магазин поставили нову партію товарів, у словнику `shop_new_goods` записано інформацію про поставлені товари та їхню кількість. 
Створіть словник `result`, який міститиме інформацію і про товари на складі, і про товари з нової поставки. Відомо, що якщо на складі залишалася хоча б одна одиниця якогось типу товару, то товару цього типу не було в поставці. 

**Приклад:**

```{{python}}
shop_stock = {"2358241350-50": 1, "2358000350-30": 24, "2358241350-00": 3}
shop_new_goods = {"2358241350-60": 10}
# -> 
result = {"2358241350-50": 1, "2358000350-30": 24, "2358241350-00": 3, "2358241350-60": 10}
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

shop_stock = {"2358241350-50": 1, "2358000350-30": 24, "2358241350-00": 3}
shop_new_goods = {"2358241350-60": 10}

result = shop_stock.copy()
result.update(shop_new_goods)
```

::::
:::::

::::: {.callout-note icon=false}
## 
:::: {#exr-py-dict-06}
<br>
Магазин Avocado зберігає інформацію про наявні фрукти та овочі у словнику `input_dict` у форматі ключ - назва фрукта або овоча, значення - кількість кілограмів у наявності. Порахуйте, скільки всього кілограмів фруктів і овочів є в магазині. Результат збережіть у змінну `result`.

**Приклад:**

```{{python}}
input_dict = {"морква": 10.44, "капуста": 5.06, "полуниця": 3}
# -> 
result = 18.5
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

input_dict = {"морква": 10.44, "капуста": 5.06, "полуниця": 3}
result = sum(input_dict.values())
```

::::
:::::

::::: {.callout-note icon=false}
## 
:::: {#exr-py-dict-07}
<br>
Є словник `courses`, що містить інформацію про вартість навчання в різних курсах. Інформація вказана у форматі: ключ - назва курсу, значення - вартість навчання.

Знайдіть ціну найдорожчого курсу. Результат збережіть у result. 

**Приклад:**

```{{python}}
courses = {"Python": 80000, "SQL": 300000}
# -> 
result = 300000
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

courses = {"Python": 80000, "SQL": 300000}
result = max(courses.values())
```

::::
:::::

::::: {.callout-note icon=false}
## 
:::: {#exr-py-dict-08}
<br>
У базі даних КНЕУ інформація про студентів і кафедри, до яких вони прикріплені, зберігається в словнику `kaf_sudents` у форматі:  ключ - ПІ студента, значення - код кафедри. 

Після другого курсу за підсумками останніх двох сесій було складено рейтинг студентів, на основі якого стався перерозподіл студентів за кафедрами. Частина студентів продовжила навчання на своїй кафедрі, а деякі студенти перейшли з однієї кафедри на іншу. Інформація про студентів, які перейшли на нову кафедру, зберігається в словнику `new_kaf_students`. 

Оновіть інформацію в словнику `kaf_sudents`, додавши в словник дані з `new_kaf_students`.

**Приклад:**

```{{python}}
kaf_sudents = {'Дробина Юлія': 100}
new_kaf_students = {'Нечаєнко Георгій': 200}

kaf_sudents = {'Дробина Юлія': 100, 'Нечаєнко Георгій': 200}
```

```{python}
#| code-fold: true
#| code-summary: "Рішення"

kaf_sudents = {'Дробина Юлія': 100}
new_kaf_students = {'Нечаєнко Георгій': 200}

kaf_sudents.update(new_kaf_students)
```

::::
:::::