# Словники

Словник у Python - це структура даних, яка зберігає об'єкти у вигляді ключів і значень. Ключі можуть бути будь-якого незмінного типу даних - числа, рядки, кортежі, а значення можуть бути будь-якого типу даних - числа, рядки, списки, словники тощо. Словник у Python є дуже ефективним способом зберігання даних, тому що він дає змогу швидко знаходити значення за ключем. Розглянемо невеликий приклад:

```{python}
# створюємо словник, який зберігає інформацію про студентів
students = {
    'Василь': { 'вік': 23, 'курс': 3},
    'Марія': {'вік': 20, 'курс': 2},
    'Петро': {'вік': 22, 'курс': 2},
    'Ольга': {'вік': 21, 'курс': 3}
}
# виводимо інформацію про студента з ім'ям "Василь"
print(students['Василь'])
# виводимо вік студента "Марія"
print(students['Марія']['вік'])
```

## Створення словника

У Python є кілька способів створення словників. Ось деякі з них:

1. **Літерали словника**

Літерали словника являють собою список ключів і значень, укладених у фігурні дужки. Ключ і значення розділяються двокрапкою, а пари ключ-значення розділяються комою. Наприклад:

```{python}
my_dict = {'ім\'я': 'Аліса', 'вік': 25, 'місто': 'Київ'}
print(my_dict)
```

2. **Вбудована функція `dict()`**

Функцію `dict()` можна використовувати для створення словників з інших послідовностей або для створення порожнього словника. Наприклад:

```{python}
empty_dict = dict()
print(empty_dict)
```

```{python}
fruit_dict = dict([('яблуко', 5), ('банан', 3), ('апельсин', 2)])
print(fruit_dict)
```

3. **Генератор словників**

Генератори словників дозволяють створювати словники на основі інших послідовностей. Наприклад:

```{python}
fruit_list = ['яблуко', 'банан', 'апельсин']
fruit_dict = {fruit: len(fruit) for fruit in fruit_list}
print(fruit_dict)
```

4. **Метод `fromkeys()`**

Метод `fromkeys()` дає змогу створити словник із зазначеними ключами й одним і тим самим значенням для всіх ключів. Наприклад:

```{python}
fruit_list = ['яблуко', 'банан', 'апельсин']
fruit_dict = {}.fromkeys(fruit_list, 0)
print(fruit_dict)
```

Це лише деякі зі способів створення словників у Python. Кожен із них має свої особливості та може використовуватися залежно від конкретного завдання.

## Основні методи словників

1. **`get()`** - дає змогу отримати значення за ключем, але на відміну від звернення через `[]`, не викликає виняток `KeyError`, якщо ключ відсутній у словнику. Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
print(my_dict.get("two"))
print(my_dict.get("four", "Key not found"))
```

2. **`keys()`** - дає змогу отримати список ключів словника. Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
print(my_dict.keys())
```

3. **`values()`** - дає змогу отримати список значень словника. Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
print(my_dict.values())
```

4. **`items()`** - дає змогу отримати список пар ключ-значення словника. Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
print(my_dict.items())
```

5. **`pop()`** - дає змогу видалити пару ключ-значення за ключем. Якщо ключ відсутній, викликає виняток `KeyError` або повертає другий аргумент, якщо він переданий. Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
print(my_dict.pop("two"))
print(my_dict.pop("four", "Key not found"))
```

6. **`clear()`** - дає змогу видалити всі пари ключ-значення зі словника. Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
my_dict.clear()
print(my_dict)
```

7. **`update()`** - дає змогу оновити словник із іншого словника або із послідовності пар ключ-значення. Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
new_dict = {"two": 22, "four": 4}
my_dict.update(new_dict)
print(my_dict)
```

8. **`copy()`** - дає змогу створити копію словника. Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
new_dict = my_dict.copy()
print(new_dict)
```

9. **`setdefault()`** - повертає значення за ключем. Якщо ключ відсутній, то він буде вставлений у словник із зазначеним значенням (або `None`, якщо значення не вказано). Приклад:

```{python}
my_dict = {"one": 1, "two": 2, "three": 3}
print(my_dict.setdefault("two", 22))
print(my_dict.setdefault("four"))
print(my_dict)
```

## Завдання для самостійної роботи

:::: {.callout-note icon=false}
## Завдання
::: {#exr-py-dict-01}
<br>
У змінну `cities_population` збережіть словник із трьома ключами: `'Київ'`, `'Париж'`, `'Токіо'`. Як значення збережіть населення цих міст у млн. осіб: `2.88`, `2.16`, `13.96`. Ключами нашого словника будуть рядки, значеннями - числа у форматі `float`.

```{python}
#| code-fold: true
#| code-summary: "Рішення"

cities_population = {
    'Київ': 2.88,
    'Париж': 2.16,
    'Токіо': 13.96
}
```

:::
::::

::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-dict-02}
<br>
Дано словник `dict_input`. Поміняйте ключі та значення місцями. Результат збережіть у `result`.

**Приклад:**

```
dict_input = {"1": 11, "2": 22, "3": 33}
result = {11: "1", 22:"2", 33:"3"}
```

::: {.callout-note collapse="true"}
## Підказка

Варіантів рішення може бути декілька. Згадайте про методи словників, які ви вивчили у цьому уроці. Також згадайте про функцію `zip()`, яка дозволяє об'єднати дві послідовності у послідовність пар [див. @sec-list-zip]. Або використайте генератор словників.
:::

```{python}
#| code-fold: true
#| code-summary: "Рішення"

dict_input = {"1": 11, "2": 22, "3": 33}
result = dict(zip(dict_input.values(), dict_input.keys()))
result = {value: key for key, value in dict_input.items()}
```

::::
:::::

::::: {.callout-note icon=false}
## Завдання
:::: {#exr-py-dict-02}
<br>
Катя - власник невеликого кондитерського виробництва, на якому виготовляють еклери. 
У нас є словник `data`, у якому міститься інформація про собівартість одиниці товару `cost_price`, ціну продажу `sell_price` та кількість товару `eclairs`. 
Потрібно порахувати, який прибуток Катя отримує після продажу своєї продукції. Результат збережіть у змінну `result`, округливши суму до цілого числа.

**Приклад:**

```
data = {
  "cost_price": 225.89,
  "sell_price": 550.00,
  "eclairs": 100
}
result = 32411
```

::: {.callout-note collapse="true"}
## Підказка

Прибуток = продажна ціна - собівартість
:::

```{python}
#| code-fold: true
#| code-summary: "Рішення"

data = {
  "cost_price": 225.89,
  "sell_price": 550.00,
  "eclairs": 100
}

result = round((data["sell_price"] - data["cost_price"]) * data["eclairs"])
```

::::
:::::

